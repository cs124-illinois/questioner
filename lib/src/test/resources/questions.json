{
  "Recursive Factorial": {
    "name": "Recursive Factorial",
    "type": "KLASS",
    "klass": "Question",
    "metadata": {
      "contentHash": "fcad45960dac5ebd8f0fc7dd4fd168a0",
      "packageName": "com.examples.recursivefactorial",
      "version": "2022.7.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Write a class method that provides a recursive implementation of factorial, accepting and returning <code>long</code> arguments.\nThrow an <code>IllegalArgumentException</code> on invalid inputs.</p>",
      "kotlinDescription": "<p>Write a method that provides a recursive implementation of factorial, accepting and returning <code>Long</code> arguments.\nThrow an <code>IllegalArgumentException</code> on invalid inputs.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/recursivefactorial/incorrect/java/iterative/Question.java",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/recursivefactorial/correct/kotlin/Question.kt"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FixedParameters;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n/*\n * Write a class method that provides a recursive implementation of factorial, accepting and returning `long` arguments.\n * Throw an `IllegalArgumentException` on invalid inputs.\n */\n\n@Correct(name = \"Recursive Factorial\", version = \"2022.7.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  public static long factorial(long input) {\n    if (input <= 0) { // mutate-disable-conditional-boundary\n      throw new IllegalArgumentException();\n    }\n    if (input == 1) {\n      return 1;\n    }\n    return input * factorial(input - 1);\n  }\n\n  @FixedParameters private static final List<Long> FIXED = Arrays.asList(-10L, -1L, 0L, 1L, 2L);\n\n  @RandomParameters\n  private static long randomParameters(Random random) {\n    return random.nextInt(32);\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/recursivefactorial/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "public class Question {\n  public static long factorial(long input) {\n    if (input <= 0) { // mutate-disable-conditional-boundary\n      throw new IllegalArgumentException();\n    }\n    if (input == 1) {\n      return 1;\n    }\n    return input * factorial(input - 1);\n  }\n}\n",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/recursivefactorial/Question.java",
      "complexity": 4,
      "features": {
        "featureMap": {
          "ARITHMETIC_OPERATORS": 2,
          "COMPARISON_OPERATORS": 2,
          "IF_STATEMENTS": 2,
          "METHOD": 1,
          "RETURN": 2,
          "CLASS": 1,
          "THROW": 1,
          "NEW_KEYWORD": 1,
          "VISIBILITY_MODIFIERS": 2,
          "STATIC_METHOD": 1,
          "RECURSION": 1
        },
        "importList": [],
        "typeList": [
          "long"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 11,
        "comment": 0,
        "blank": 1
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [
      {
        "klass": "QuestionKt",
        "contents": "fun factorial(input: Long): Long {\n  require(input > 0)\n  if (input == 1L) {\n    return 1\n  }\n  return input * factorial(input - 1)\n}",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/recursivefactorial/correct/kotlin/Question.kt",
        "complexity": 3,
        "features": {
          "featureMap": {
            "COMPARISON_OPERATORS": 1,
            "IF_STATEMENTS": 1,
            "METHOD": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 7,
          "comment": 0,
          "blank": 0
        }
      }
    ],
    "incorrect": [
      {
        "klass": "Question",
        "contents": "public class Question {\n  public static long factorial(long input) {\n    if (input <= 0) {\n      throw new IllegalArgumentException();\n    }\n    long result = 1;\n    for (long multiplier = 2; multiplier <= input; multiplier++) {\n      result *= multiplier;\n    }\n    return result;\n  }\n}\n",
        "reason": "RECURSION",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/recursivefactorial/incorrect/java/iterative/Question.java",
        "starter": false,
        "needed": true
      }
    ],
    "common": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "recursive-factorial",
    "kotlinSolution": {
      "klass": "QuestionKt",
      "contents": "fun factorial(input: Long): Long {\n  require(input > 0)\n  if (input == 1L) {\n    return 1\n  }\n  return input * factorial(input - 1)\n}",
      "language": "kotlin",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/recursivefactorial/correct/kotlin/Question.kt",
      "complexity": 3,
      "features": {
        "featureMap": {
          "COMPARISON_OPERATORS": 1,
          "IF_STATEMENTS": 1,
          "METHOD": 1
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 7,
        "comment": 0,
        "blank": 0
      }
    },
    "hasKotlin": true,
    "published": {
      "name": "Recursive Factorial",
      "type": "KLASS",
      "path": "recursive-factorial",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "packageName": "com.examples.recursivefactorial",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Write a class method that provides a recursive implementation of factorial, accepting and returning <code>long</code> arguments.\nThrow an <code>IllegalArgumentException</code> on invalid inputs.</p>",
        "kotlin": "<p>Write a method that provides a recursive implementation of factorial, accepting and returning <code>Long</code> arguments.\nThrow an <code>IllegalArgumentException</code> on invalid inputs.</p>"
      },
      "complexity": {
        "java": 4,
        "kotlin": 3
      },
      "features": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 2,
            "IF_STATEMENTS": 2,
            "METHOD": 1,
            "RETURN": 2,
            "CLASS": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "RECURSION": 1
          },
          "importList": [],
          "typeList": [
            "long"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "COMPARISON_OPERATORS": 1,
            "IF_STATEMENTS": 1,
            "METHOD": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 11,
          "comment": 0,
          "blank": 1
        },
        "kotlin": {
          "source": 7,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "Equals 88": {
    "name": "Equals 88",
    "type": "METHOD",
    "klass": "Question",
    "metadata": {
      "contentHash": "55b5f11ac1ba1ce7231dc090b270c8f7",
      "packageName": "com.examples.equals88",
      "version": "2021.6.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Write a method named <code>equals88</code> that returns <code>true</code> if its <code>int</code> argument is equal to 88, our magic number.</p>",
      "usedFiles": [],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FixedParameters;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n/*\n * Write a method named `equals88` that returns `true` if its `int` argument is equal to 88, our magic number.\n */\n\n@Correct(name = \"Equals 88\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\n@Wrap\npublic class Question {\n  boolean equals88(int value) {\n    return value == 88;\n  }\n\n  @FixedParameters private static final List<Integer> FIXED = Arrays.asList(88, 188, 888, 8);\n\n  @RandomParameters\n  private static int randomInts(Random random) {\n    if (random.nextBoolean()) {\n      return 88;\n    } else {\n      return random.nextInt();\n    }\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/equals88/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "boolean equals88(int value) {\n  return value == 88;\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/equals88/Question.java",
      "complexity": 1,
      "features": {
        "featureMap": {
          "COMPARISON_OPERATORS": 1,
          "METHOD": 1,
          "RETURN": 1
        },
        "importList": [],
        "typeList": [
          "boolean",
          "int"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 3,
        "comment": 0,
        "blank": 0
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [],
    "incorrect": [],
    "common": [],
    "javaTemplate": "public class Question {\n  {{{ contents }}}\n}",
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "equals-88",
    "hasKotlin": false,
    "published": {
      "name": "Equals 88",
      "type": "METHOD",
      "path": "equals-88",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "packageName": "com.examples.equals88",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Write a method named <code>equals88</code> that returns <code>true</code> if its <code>int</code> argument is equal to 88, our magic number.</p>"
      },
      "complexity": {
        "java": 1
      },
      "features": {
        "java": {
          "featureMap": {
            "COMPARISON_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1
          },
          "importList": [],
          "typeList": [
            "boolean",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "Squirrel Equality": {
    "name": "Squirrel Equality",
    "type": "KLASS",
    "klass": "Squirrel",
    "metadata": {
      "contentHash": "13d2fbefde89c7c6a76b8da23c57b272",
      "packageName": "com.examples.tripleequals",
      "version": "2022.7.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Define a public class named <code>Squirrel</code>.\nThe <code>Squirrel</code> constructor should accept a <code>String</code> name, <code>String</code> tree, and <code>int</code> acorns, in that order.\nReject <code>null</code> names and trees using <code>assert</code>, and also <code>assert</code> that acorns is greater than 0 and less than or\nequal to 24.\n(Squirrels don't get too greedy and never acquire more acorns than that!)\nOverride equals and consider two <code>Squirrel</code> instances to be equal if they have the same name and tree.\nDo not provide getters or setters for your variables or expose them publicly.</p>",
      "usedFiles": [],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Squirrel",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FixedParameters;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.jenisol.core.Three;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Generators;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n/*\n * Define a public class named `Squirrel`.\n * The `Squirrel` constructor should accept a `String` name, `String` tree, and `int` acorns, in that order.\n * Reject `null` names and trees using `assert`, and also `assert` that acorns is greater than 0 and less than or\n * equal to 24.\n * (Squirrels don't get too greedy and never acquire more acorns than that!)\n * Override equals and consider two `Squirrel` instances to be equal if they have the same name and tree.\n * Do not provide getters or setters for your variables or expose them publicly.\n */\n\n@SuppressWarnings(\"FieldCanBeLocal\")\n@Correct(name = \"Squirrel Equality\", version = \"2022.7.0\", author = \"challen@illinois.edu\")\npublic class Squirrel {\n  private final String name;\n  private final String tree;\n  private final int acorns;\n\n  public Squirrel(String setName, String setTree, int setAcorns) {\n    assert setName != null;\n    assert setTree != null;\n    assert setAcorns > 0 && setAcorns <= 9;\n    name = setName;\n    tree = setTree;\n    acorns = setAcorns;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof Squirrel other)) {\n      return false;\n    }\n    return name.equals(other.name) && tree.equals(other.tree);\n  }\n\n  @FixedParameters\n  private static final List<Three<String, String, Integer>> FIXED =\n      Arrays.asList(\n          new Three<>(\"Patch\", \"Elm\", 8),\n          new Three<>(null, \"Elm\", 8),\n          new Three<>(\"Patch\", null, 8),\n          new Three<>(\"Patch\", \"Elm\", 0),\n          new Three<>(\"Patch\", \"Elm\", 10),\n          new Three<>(\"Patch\", \"Elm\", 9),\n          new Three<>(\"Marty\", \"Elm\", 8),\n          new Three<>(\"Patch\", \"Oak\", 1),\n          new Three<>(\"Patch\", \"Elm\", 8));\n\n  @RandomParameters\n  private static Three<String, String, Integer> randomParameters(Random random) {\n    String name = Generators.randomAlphanumericString(random, 16);\n    String breed = Generators.randomAlphanumericString(random, 32);\n    int lives = random.nextInt(26);\n    return new Three<>(name, breed, lives);\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/tripleequals/Squirrel.java"
    },
    "correct": {
      "klass": "Squirrel",
      "contents": "public class Squirrel {\n  private final String name;\n  private final String tree;\n  private final int acorns;\n\n  public Squirrel(String setName, String setTree, int setAcorns) {\n    assert setName != null;\n    assert setTree != null;\n    assert setAcorns > 0 && setAcorns <= 9;\n    name = setName;\n    tree = setTree;\n    acorns = setAcorns;\n  }\n\n  public boolean equals(Object o) {\n    if (!(o instanceof Squirrel other)) {\n      return false;\n    }\n    return name.equals(other.name) && tree.equals(other.tree);\n  }\n}\n",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/tripleequals/Squirrel.java",
      "complexity": 5,
      "features": {
        "featureMap": {
          "VARIABLE_REASSIGNMENTS": 3,
          "COMPARISON_OPERATORS": 4,
          "LOGICAL_OPERATORS": 3,
          "IF_STATEMENTS": 1,
          "METHOD": 1,
          "RETURN": 2,
          "CONSTRUCTOR": 1,
          "STRING": 4,
          "NULL": 2,
          "INSTANCEOF": 1,
          "CLASS": 1,
          "ASSERT": 3,
          "VISIBILITY_MODIFIERS": 6,
          "FINAL_FIELD": 3,
          "DOT_NOTATION": 4,
          "DOTTED_METHOD_CALL": 2,
          "DOTTED_VARIABLE_ACCESS": 2
        },
        "importList": [],
        "typeList": [
          "String",
          "int",
          "boolean",
          "Object",
          "Squirrel"
        ],
        "identifierList": [],
        "dottedMethodList": [
          "equals"
        ]
      },
      "lineCount": {
        "source": 19,
        "comment": 0,
        "blank": 3
      },
      "expectedDeadCount": 4
    },
    "alternativeSolutions": [],
    "incorrect": [],
    "common": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "squirrel-equality",
    "hasKotlin": false,
    "published": {
      "name": "Squirrel Equality",
      "type": "KLASS",
      "path": "squirrel-equality",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "packageName": "com.examples.tripleequals",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Define a public class named <code>Squirrel</code>.\nThe <code>Squirrel</code> constructor should accept a <code>String</code> name, <code>String</code> tree, and <code>int</code> acorns, in that order.\nReject <code>null</code> names and trees using <code>assert</code>, and also <code>assert</code> that acorns is greater than 0 and less than or\nequal to 24.\n(Squirrels don't get too greedy and never acquire more acorns than that!)\nOverride equals and consider two <code>Squirrel</code> instances to be equal if they have the same name and tree.\nDo not provide getters or setters for your variables or expose them publicly.</p>"
      },
      "complexity": {
        "java": 5
      },
      "features": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 3,
            "COMPARISON_OPERATORS": 4,
            "LOGICAL_OPERATORS": 3,
            "IF_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2,
            "CONSTRUCTOR": 1,
            "STRING": 4,
            "NULL": 2,
            "INSTANCEOF": 1,
            "CLASS": 1,
            "ASSERT": 3,
            "VISIBILITY_MODIFIERS": 6,
            "FINAL_FIELD": 3,
            "DOT_NOTATION": 4,
            "DOTTED_METHOD_CALL": 2,
            "DOTTED_VARIABLE_ACCESS": 2
          },
          "importList": [],
          "typeList": [
            "String",
            "int",
            "boolean",
            "Object",
            "Squirrel"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "equals"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 19,
          "comment": 0,
          "blank": 3
        }
      }
    },
    "fauxStatic": false
  },
  "Counter": {
    "name": "Counter",
    "type": "KLASS",
    "klass": "Counter",
    "metadata": {
      "contentHash": "5312a2ea51ecb88e10e87262480b68ea",
      "packageName": "com.examples.counterobject",
      "version": "2021.6.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Define and implement a <code>public</code> class <code>Counter</code>.\n<code>Counter</code> should provide a single public constructor that accepts an <code>int</code> parameter.\nIt should also provide <code>increment</code> and <code>decrement</code> methods, both taking no parameters and returning <code>void</code>.\n<code>increment</code> should increase the stored count, while <code>decrement</code> should decrease it.\nFinally, provide a <code>getValue</code> method that returns the stored value.</p>",
      "kotlinDescription": "<p>Define and implement a class <code>Counter</code>.\n<code>Counter</code> should provide primary constructor that accepts an <code>Int</code> parameter.\nIt should also provide <code>increment</code> and <code>decrement</code> methods, both taking no parameters and returning <code>Unit</code>.\n<code>increment</code> should increase the stored count, while <code>decrement</code> should decrease it.\nFinally, provide a <code>getValue</code> method that returns the stored value.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/counterobject/correct/kotlin/Counter.kt"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Counter",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Define and implement a `public` class `Counter`.\n * `Counter` should provide a single public constructor that accepts an `int` parameter.\n * It should also provide `increment` and `decrement` methods, both taking no parameters and returning `void`.\n * `increment` should increase the stored count, while `decrement` should decrease it.\n * Finally, provide a `getValue` method that returns the stored value.\n */\n\n@Correct(name = \"Counter\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\npublic class Counter {\n  private int value;\n\n  public Counter(int setValue) {\n    value = setValue;\n  }\n\n  public void increment() {\n    value++;\n  }\n\n  public void decrement() {\n    value--;\n  }\n\n  public int getValue() {\n    return value;\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/counterobject/Counter.java"
    },
    "correct": {
      "klass": "Counter",
      "contents": "public class Counter {\n  private int value;\n\n  public Counter(int setValue) {\n    value = setValue;\n  }\n\n  public void increment() {\n    value++;\n  }\n\n  public void decrement() {\n    value--;\n  }\n\n  public int getValue() {\n    return value;\n  }\n}\n",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/counterobject/Counter.java",
      "complexity": 4,
      "features": {
        "featureMap": {
          "VARIABLE_REASSIGNMENTS": 3,
          "UNARY_OPERATORS": 2,
          "METHOD": 3,
          "RETURN": 1,
          "CONSTRUCTOR": 1,
          "GETTER": 1,
          "CLASS": 1,
          "VISIBILITY_MODIFIERS": 6
        },
        "importList": [],
        "typeList": [
          "int"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 15,
        "comment": 0,
        "blank": 5
      },
      "expectedDeadCount": 0
    },
    "alternativeSolutions": [
      {
        "klass": "Counter",
        "contents": "class Counter(setValue: Int) {\n  var value = setValue\n    private set\n  fun increment() {\n    value++\n  }\n  fun decrement() {\n    value--\n  }\n}",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/counterobject/correct/kotlin/Counter.kt",
        "complexity": 3,
        "features": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 2,
            "METHOD": 2,
            "CLASS": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 10,
          "comment": 0,
          "blank": 0
        }
      }
    ],
    "incorrect": [],
    "common": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "counter",
    "kotlinSolution": {
      "klass": "Counter",
      "contents": "class Counter(setValue: Int) {\n  var value = setValue\n    private set\n  fun increment() {\n    value++\n  }\n  fun decrement() {\n    value--\n  }\n}",
      "language": "kotlin",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/counterobject/correct/kotlin/Counter.kt",
      "complexity": 3,
      "features": {
        "featureMap": {
          "VARIABLE_REASSIGNMENTS": 2,
          "METHOD": 2,
          "CLASS": 1
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 10,
        "comment": 0,
        "blank": 0
      }
    },
    "hasKotlin": true,
    "published": {
      "name": "Counter",
      "type": "KLASS",
      "path": "counter",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "packageName": "com.examples.counterobject",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Define and implement a <code>public</code> class <code>Counter</code>.\n<code>Counter</code> should provide a single public constructor that accepts an <code>int</code> parameter.\nIt should also provide <code>increment</code> and <code>decrement</code> methods, both taking no parameters and returning <code>void</code>.\n<code>increment</code> should increase the stored count, while <code>decrement</code> should decrease it.\nFinally, provide a <code>getValue</code> method that returns the stored value.</p>",
        "kotlin": "<p>Define and implement a class <code>Counter</code>.\n<code>Counter</code> should provide primary constructor that accepts an <code>Int</code> parameter.\nIt should also provide <code>increment</code> and <code>decrement</code> methods, both taking no parameters and returning <code>Unit</code>.\n<code>increment</code> should increase the stored count, while <code>decrement</code> should decrease it.\nFinally, provide a <code>getValue</code> method that returns the stored value.</p>"
      },
      "complexity": {
        "java": 4,
        "kotlin": 3
      },
      "features": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 3,
            "UNARY_OPERATORS": 2,
            "METHOD": 3,
            "RETURN": 1,
            "CONSTRUCTOR": 1,
            "GETTER": 1,
            "CLASS": 1,
            "VISIBILITY_MODIFIERS": 6
          },
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 2,
            "METHOD": 2,
            "CLASS": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 15,
          "comment": 0,
          "blank": 5
        },
        "kotlin": {
          "source": 10,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "Print Sum": {
    "name": "Print Sum",
    "type": "SNIPPET",
    "klass": "Question",
    "metadata": {
      "contentHash": "de5b693d7edf480453cf1db502b7bd87",
      "packageName": "com.examples.printsum",
      "version": "2021.6.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Given two <code>int</code> variables <code>first</code> and <code>second</code> that are already declared and initialized, print their sum.</p>",
      "usedFiles": [],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Given two `int` variables `first` and `second` that are already declared and initialized, print their sum.\n */\n\n@Correct(name = \"Print Sum\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\npublic class Question {\n  public static void printSum(int first, int second) {\n    // TEMPLATE_START\n    System.out.println(first + second);\n    // TEMPLATE_END\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/printsum/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "System.out.println(first + second);",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/printsum/Question.java",
      "complexity": 1,
      "features": {
        "featureMap": {
          "ARITHMETIC_OPERATORS": 1,
          "PRINT_STATEMENTS": 1
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": [
          "println"
        ]
      },
      "lineCount": {
        "source": 1,
        "comment": 0,
        "blank": 0
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [],
    "incorrect": [],
    "common": [],
    "javaTemplate": "public class Question {\n  public static void printSum(int first, int second) {\n    {{{ contents }}}\n  }\n}\n",
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "print-sum",
    "hasKotlin": false,
    "published": {
      "name": "Print Sum",
      "type": "SNIPPET",
      "path": "print-sum",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "packageName": "com.examples.printsum",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Given two <code>int</code> variables <code>first</code> and <code>second</code> that are already declared and initialized, print their sum.</p>"
      },
      "complexity": {
        "java": 1
      },
      "features": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "PRINT_STATEMENTS": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "println"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 1,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "Larger of Two": {
    "name": "Larger of Two",
    "type": "METHOD",
    "klass": "Question",
    "metadata": {
      "contentHash": "e3119b708194eb9e63336280c63c7a84",
      "packageName": "com.examples.largestoftwo",
      "version": "2021.6.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Write a method <code>larger</code> that returns the larger of two <code>int</code> arguments.</p>",
      "usedFiles": [],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\n\n/*\n * Write a method `larger` that returns the larger of two `int` arguments.\n */\n@SuppressWarnings(\"ManualMinMaxCalculation\")\n@Correct(name = \"Larger of Two\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\n@Wrap\npublic class Question {\n  int larger(int first, int second) {\n    if (first > second) { // mutate-disable-conditional-boundary\n      return first;\n    } else {\n      return second;\n    }\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/largestoftwo/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "int larger(int first, int second) {\n  if (first > second) { // mutate-disable-conditional-boundary\n    return first;\n  } else {\n    return second;\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/largestoftwo/Question.java",
      "complexity": 2,
      "features": {
        "featureMap": {
          "COMPARISON_OPERATORS": 1,
          "IF_STATEMENTS": 1,
          "ELSE_STATEMENTS": 1,
          "METHOD": 1,
          "RETURN": 2
        },
        "importList": [],
        "typeList": [
          "int"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 7,
        "comment": 0,
        "blank": 0
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [],
    "incorrect": [],
    "common": [],
    "javaTemplate": "public class Question {\n  {{{ contents }}}\n}",
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "larger-of-two",
    "hasKotlin": false,
    "published": {
      "name": "Larger of Two",
      "type": "METHOD",
      "path": "larger-of-two",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "packageName": "com.examples.largestoftwo",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Write a method <code>larger</code> that returns the larger of two <code>int</code> arguments.</p>"
      },
      "complexity": {
        "java": 2
      },
      "features": {
        "java": {
          "featureMap": {
            "COMPARISON_OPERATORS": 1,
            "IF_STATEMENTS": 1,
            "ELSE_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2
          },
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 7,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "Combine Minus Two": {
    "name": "Combine Minus Two",
    "type": "METHOD",
    "klass": "Question",
    "metadata": {
      "contentHash": "20cdf15b91970109fdef324f27e1cacf",
      "packageName": "com.examples.combineminustwo",
      "version": "2021.6.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Write a function <code>combine</code> that, given two <code>String</code> arguments, returns the second appended to the first.\nExcept you should omit the first two characters of each <code>String</code>.\nFor example, given <code>Java</code> and <code>Kotlin</code>, you would return <code>vatlin</code>.\nYou can assume that each <code>String</code> is of length at least two.</p>",
      "usedFiles": [],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FixedParameters;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.jenisol.core.Two;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Generators;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n/*\n * Write a function `combine` that, given two `String` arguments, returns the second appended to the first.\n * Except you should omit the first two characters of each `String`.\n * For example, given `Java` and `Kotlin`, you would return `vatlin`.\n * You can assume that each `String` is of length at least two.\n */\n\n@Correct(name = \"Combine Minus Two\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\n@Wrap\npublic class Question {\n  String combine(String first, String second) {\n    return first.substring(2) + second.substring(2);\n  }\n\n  @FixedParameters\n  private static final List<Two<String, String>> FIXED =\n      Arrays.asList(new Two<>(\"Java\", \"Kotlin\"), new Two<>(\"CS125\", \"CS124\"));\n\n  @RandomParameters\n  private static Two<String, String> randomStrings(Random random) {\n    String first = Generators.randomAlphanumericStringWithLength(random, random.nextInt(32) + 2);\n    String second = Generators.randomAlphanumericStringWithLength(random, random.nextInt(32) + 2);\n    return new Two<>(first, second);\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/combineminustwo/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "String combine(String first, String second) {\n  return first.substring(2) + second.substring(2);\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/combineminustwo/Question.java",
      "complexity": 1,
      "features": {
        "featureMap": {
          "ARITHMETIC_OPERATORS": 1,
          "METHOD": 1,
          "RETURN": 1,
          "STRING": 3,
          "DOT_NOTATION": 2,
          "DOTTED_METHOD_CALL": 2
        },
        "importList": [],
        "typeList": [
          "String"
        ],
        "identifierList": [],
        "dottedMethodList": [
          "substring"
        ]
      },
      "lineCount": {
        "source": 3,
        "comment": 0,
        "blank": 0
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [],
    "incorrect": [],
    "common": [],
    "javaTemplate": "public class Question {\n  {{{ contents }}}\n}",
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "combine-minus-two",
    "hasKotlin": false,
    "published": {
      "name": "Combine Minus Two",
      "type": "METHOD",
      "path": "combine-minus-two",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "packageName": "com.examples.combineminustwo",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Write a function <code>combine</code> that, given two <code>String</code> arguments, returns the second appended to the first.\nExcept you should omit the first two characters of each <code>String</code>.\nFor example, given <code>Java</code> and <code>Kotlin</code>, you would return <code>vatlin</code>.\nYou can assume that each <code>String</code> is of length at least two.</p>"
      },
      "complexity": {
        "java": 1
      },
      "features": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "STRING": 3,
            "DOT_NOTATION": 2,
            "DOTTED_METHOD_CALL": 2
          },
          "importList": [],
          "typeList": [
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "substring"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "Fancy String Compare": {
    "name": "Fancy String Compare",
    "type": "METHOD",
    "klass": "Question",
    "metadata": {
      "contentHash": "238a3487d82ef1431fab06a22392a361",
      "packageName": "com.examples.fancystringcompare",
      "version": "2021.6.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Write a method <code>fancyCompare</code> that takes two <code>String</code> arguments. If the two <code>String</code>s are equal, return -1.\nOtherwise, return the length of the longer <code>String</code>.\nYou should <code>assert</code> that both inputs are not <code>null</code>.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/fancystringcompare/incorrect/badequals/Question.java"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\n\n/*\n * Write a method `fancyCompare` that takes two `String` arguments. If the two `String`s are equal, return -1.\n * Otherwise, return the length of the longer `String`.\n * You should `assert` that both inputs are not `null`.\n */\n\n@SuppressWarnings(\"ManualMinMaxCalculation\")\n@Correct(name = \"Fancy String Compare\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\n@Wrap\npublic class Question {\n  int fancyEquals(String first, String second) {\n    assert first != null;\n    assert second != null;\n    if (first.equals(second)) {\n      return -1;\n      // mutate-disable-conditional-boundary\n      // mutate-disable-modify-length-and-size\n    } else if (first.length() > second.length()) {\n      return first.length();\n    } else {\n      return second.length();\n    }\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/fancystringcompare/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "int fancyEquals(String first, String second) {\n  assert first != null;\n  assert second != null;\n  if (first.equals(second)) {\n    return -1;\n    // mutate-disable-conditional-boundary\n    // mutate-disable-modify-length-and-size\n  } else if (first.length() > second.length()) {\n    return first.length();\n  } else {\n    return second.length();\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/fancystringcompare/Question.java",
      "complexity": 3,
      "features": {
        "featureMap": {
          "COMPARISON_OPERATORS": 3,
          "IF_STATEMENTS": 1,
          "ELSE_STATEMENTS": 1,
          "ELSE_IF": 1,
          "METHOD": 1,
          "RETURN": 3,
          "STRING": 2,
          "NULL": 2,
          "ASSERT": 2,
          "DOT_NOTATION": 5,
          "DOTTED_METHOD_CALL": 5
        },
        "importList": [],
        "typeList": [
          "int",
          "String"
        ],
        "identifierList": [],
        "dottedMethodList": [
          "equals",
          "length"
        ]
      },
      "lineCount": {
        "source": 11,
        "comment": 2,
        "blank": 0
      },
      "expectedDeadCount": 3
    },
    "alternativeSolutions": [],
    "incorrect": [
      {
        "klass": "Question",
        "contents": "int fancyEquals(String first, String second) {\n  assert first != null;\n  assert second != null;\n  if (first == second) {\n    return -1;\n  } else if (first.length() > second.length()) { // mutate-disable-conditional-boundary\n    return first.length();\n  } else {\n    return second.length();\n  }\n}",
        "reason": "TEST",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/fancystringcompare/incorrect/badequals/Question.java",
        "starter": false,
        "needed": true
      }
    ],
    "common": [],
    "javaTemplate": "public class Question {\n  {{{ contents }}}\n}",
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "fancy-string-compare",
    "hasKotlin": false,
    "published": {
      "name": "Fancy String Compare",
      "type": "METHOD",
      "path": "fancy-string-compare",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "packageName": "com.examples.fancystringcompare",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Write a method <code>fancyCompare</code> that takes two <code>String</code> arguments. If the two <code>String</code>s are equal, return -1.\nOtherwise, return the length of the longer <code>String</code>.\nYou should <code>assert</code> that both inputs are not <code>null</code>.</p>"
      },
      "complexity": {
        "java": 3
      },
      "features": {
        "java": {
          "featureMap": {
            "COMPARISON_OPERATORS": 3,
            "IF_STATEMENTS": 1,
            "ELSE_STATEMENTS": 1,
            "ELSE_IF": 1,
            "METHOD": 1,
            "RETURN": 3,
            "STRING": 2,
            "NULL": 2,
            "ASSERT": 2,
            "DOT_NOTATION": 5,
            "DOTTED_METHOD_CALL": 5
          },
          "importList": [],
          "typeList": [
            "int",
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "equals",
            "length"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 11,
          "comment": 2,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "String Duplicates": {
    "name": "String Duplicates",
    "type": "METHOD",
    "klass": "Question",
    "metadata": {
      "contentHash": "848fc37fe58894f89831bf5323eb8e78",
      "packageName": "com.examples.stringduplicates",
      "version": "2022.2.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Given a non-<code>null</code> <code>String</code> containing comma-separated values, write a method <code>detectDuplicates</code>\nthat returns <code>true</code> if the <code>String</code> includes duplicate values, and <code>false</code> otherwise.\nTrim whitespace from all <code>String</code>s.</p>",
      "kotlinDescription": "<p>Given a <code>String</code> containing comma-separated values, write a method <code>detectDuplicates</code>\nthat returns <code>true</code> if the <code>String</code> includes duplicate values, and <code>false</code> otherwise.\nTrim whitespace from all <code>String</code>s.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/stringduplicates/correct/java/usesmap/Question.java",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/stringduplicates/correct/kotlin/Question.kt"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.NotNull;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Generators;\nimport edu.illinois.cs.cs125.questioner.lib.TemplateImports;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport java.util.HashSet;\nimport java.util.Random;\nimport java.util.Set;\n\n/*\n * Given a non-`null` `String` containing comma-separated values, write a method `detectDuplicates`\n * that returns `true` if the `String` includes duplicate values, and `false` otherwise.\n * Trim whitespace from all `String`s.\n */\n\n@Correct(name = \"String Duplicates\", author = \"challen@illinois.edu\", version = \"2022.2.0\")\n@Wrap\n@TemplateImports(paths = \"java.util.Map, java.util.HashMap\")\npublic class Question {\n  boolean detectDuplicates(@NotNull String input) {\n    Set<String> values = new HashSet<>();\n    for (String part : input.split(\",\")) {\n      String current = part.trim();\n      if (values.contains(current)) {\n        return true;\n      }\n      values.add(current);\n    }\n    return false;\n  }\n\n  @RandomParameters\n  private static String randomParameters(Random random) {\n    String[] values = new String[random.nextInt(32) + 32];\n    for (int i = 0; i < values.length; i++) {\n      String current = Generators.randomAlphanumericString(random, 32);\n      if (random.nextBoolean()) {\n        values[i] = \" \" + current;\n      } else {\n        values[i] = current + \" \";\n      }\n    }\n    if (random.nextBoolean()) {\n      values[random.nextInt(values.length)] =\n          new String(values[random.nextInt(values.length)].toCharArray());\n    }\n    return String.join(\",\", values);\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/stringduplicates/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "boolean detectDuplicates(String input) {\n  Set<String> values = new HashSet<>();\n  for (String part : input.split(\",\")) {\n    String current = part.trim();\n    if (values.contains(current)) {\n      return true;\n    }\n    values.add(current);\n  }\n  return false;\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/stringduplicates/Question.java",
      "complexity": 3,
      "features": {
        "featureMap": {
          "LOCAL_VARIABLE_DECLARATIONS": 3,
          "VARIABLE_ASSIGNMENTS": 2,
          "IF_STATEMENTS": 1,
          "FOR_LOOPS": 1,
          "ENHANCED_FOR": 1,
          "NESTED_IF": 1,
          "METHOD": 1,
          "RETURN": 2,
          "STRING": 4,
          "NEW_KEYWORD": 1,
          "TYPE_PARAMETERS": 1,
          "DOT_NOTATION": 4,
          "DOTTED_METHOD_CALL": 4
        },
        "importList": [],
        "typeList": [
          "boolean",
          "String",
          "Set<String>"
        ],
        "identifierList": [
          "values",
          "current"
        ],
        "dottedMethodList": [
          "split",
          "trim",
          "contains",
          "add"
        ]
      },
      "lineCount": {
        "source": 11,
        "comment": 0,
        "blank": 0
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [
      {
        "klass": "Question",
        "contents": "boolean detectDuplicates(String input) {\n  Map<String, Boolean> values = new HashMap<>();\n  for (String part : input.split(\",\")) {\n    String current = part.trim();\n    if (values.keySet().contains(current)) {\n      return true;\n    }\n    values.put(current, true);\n  }\n  return false;\n}",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/stringduplicates/correct/java/usesmap/Question.java",
        "complexity": 3,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 3,
            "VARIABLE_ASSIGNMENTS": 2,
            "IF_STATEMENTS": 1,
            "FOR_LOOPS": 1,
            "ENHANCED_FOR": 1,
            "NESTED_IF": 1,
            "METHOD": 1,
            "RETURN": 2,
            "STRING": 4,
            "NEW_KEYWORD": 1,
            "BOXING_CLASSES": 1,
            "TYPE_PARAMETERS": 1,
            "DOT_NOTATION": 5,
            "DOTTED_METHOD_CALL": 5
          },
          "importList": [],
          "typeList": [
            "boolean",
            "String",
            "Map<String,Boolean>",
            "Boolean"
          ],
          "identifierList": [
            "values",
            "current"
          ],
          "dottedMethodList": [
            "split",
            "trim",
            "contains",
            "keySet",
            "put"
          ]
        },
        "lineCount": {
          "source": 11,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 1
      },
      {
        "klass": "Question",
        "contents": "fun detectDuplicates(input: String): Boolean {\n  val values = mutableSetOf<String>()\n  for (part in input.split(\",\")) {\n    val current = part.trim()\n    if (values.contains(current)) {\n      return true\n    }\n    values.add(current)\n  }\n  return false\n}",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/stringduplicates/correct/kotlin/Question.kt",
        "complexity": 3,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 2,
            "VARIABLE_ASSIGNMENTS": 2,
            "IF_STATEMENTS": 1,
            "FOR_LOOPS": 1,
            "METHOD": 1,
            "DOT_NOTATION": 4,
            "DOTTED_METHOD_CALL": 4
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "split",
            "trim",
            "contains",
            "add"
          ]
        },
        "lineCount": {
          "source": 11,
          "comment": 0,
          "blank": 0
        }
      }
    ],
    "incorrect": [],
    "common": [],
    "javaTemplate": "import java.util.HashSet;\nimport java.util.Set;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class Question {\n  {{{ contents }}}\n}",
    "kotlinTemplate": "import java.util.Map\nimport java.util.HashMap\n\nclass Question {\n  {{{ contents }}}\n}",
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "string-duplicates",
    "kotlinSolution": {
      "klass": "Question",
      "contents": "fun detectDuplicates(input: String): Boolean {\n  val values = mutableSetOf<String>()\n  for (part in input.split(\",\")) {\n    val current = part.trim()\n    if (values.contains(current)) {\n      return true\n    }\n    values.add(current)\n  }\n  return false\n}",
      "language": "kotlin",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/stringduplicates/correct/kotlin/Question.kt",
      "complexity": 3,
      "features": {
        "featureMap": {
          "LOCAL_VARIABLE_DECLARATIONS": 2,
          "VARIABLE_ASSIGNMENTS": 2,
          "IF_STATEMENTS": 1,
          "FOR_LOOPS": 1,
          "METHOD": 1,
          "DOT_NOTATION": 4,
          "DOTTED_METHOD_CALL": 4
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": [
          "split",
          "trim",
          "contains",
          "add"
        ]
      },
      "lineCount": {
        "source": 11,
        "comment": 0,
        "blank": 0
      }
    },
    "hasKotlin": true,
    "published": {
      "name": "String Duplicates",
      "type": "METHOD",
      "path": "string-duplicates",
      "author": "challen@illinois.edu",
      "version": "2022.2.0",
      "packageName": "com.examples.stringduplicates",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Given a non-<code>null</code> <code>String</code> containing comma-separated values, write a method <code>detectDuplicates</code>\nthat returns <code>true</code> if the <code>String</code> includes duplicate values, and <code>false</code> otherwise.\nTrim whitespace from all <code>String</code>s.</p>",
        "kotlin": "<p>Given a <code>String</code> containing comma-separated values, write a method <code>detectDuplicates</code>\nthat returns <code>true</code> if the <code>String</code> includes duplicate values, and <code>false</code> otherwise.\nTrim whitespace from all <code>String</code>s.</p>"
      },
      "complexity": {
        "java": 3,
        "kotlin": 3
      },
      "features": {
        "java": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 3,
            "VARIABLE_ASSIGNMENTS": 2,
            "IF_STATEMENTS": 1,
            "FOR_LOOPS": 1,
            "ENHANCED_FOR": 1,
            "NESTED_IF": 1,
            "METHOD": 1,
            "RETURN": 2,
            "STRING": 4,
            "NEW_KEYWORD": 1,
            "TYPE_PARAMETERS": 1,
            "DOT_NOTATION": 4,
            "DOTTED_METHOD_CALL": 4
          },
          "importList": [],
          "typeList": [
            "boolean",
            "String",
            "Set<String>"
          ],
          "identifierList": [
            "values",
            "current"
          ],
          "dottedMethodList": [
            "split",
            "trim",
            "contains",
            "add"
          ]
        },
        "kotlin": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 2,
            "VARIABLE_ASSIGNMENTS": 2,
            "IF_STATEMENTS": 1,
            "FOR_LOOPS": 1,
            "METHOD": 1,
            "DOT_NOTATION": 4,
            "DOTTED_METHOD_CALL": 4
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "split",
            "trim",
            "contains",
            "add"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 11,
          "comment": 0,
          "blank": 0
        },
        "kotlin": {
          "source": 11,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "Private Recursive Helper": {
    "name": "Private Recursive Helper",
    "type": "KLASS",
    "klass": "Question",
    "metadata": {
      "contentHash": "d4b72ea3fce31f94f4e57e3685eef631",
      "packageName": "com.examples.privaterecursivehelper",
      "version": "2022.7.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Testing question for recursion checks on private methods.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/privaterecursivehelper/incorrect/java/iterative/Question.java"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FilterParameters;\nimport edu.illinois.cs.cs125.jenisol.core.SkipTest;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Testing question for recursion checks on private methods.\n */\n\n@Correct(name = \"Private Recursive Helper\", version = \"2022.7.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  private static int rangeSumHelper(int range) {\n    if (range == 0) {\n      return 0;\n    }\n    return range + rangeSumHelper(range - 1);\n  }\n\n  @FilterParameters\n  private static void filterRangeSum(int range) {\n    if (range > 1024) {\n      throw new SkipTest();\n    }\n  }\n\n  public static int rangeSum(int range) {\n    if (range < 0) {\n      throw new IllegalArgumentException();\n    }\n    return rangeSumHelper(range);\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/privaterecursivehelper/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "public class Question {\n  private static int rangeSumHelper(int range) {\n    if (range == 0) {\n      return 0;\n    }\n    return range + rangeSumHelper(range - 1);\n  }\n\n  public static int rangeSum(int range) {\n    if (range < 0) {\n      throw new IllegalArgumentException();\n    }\n    return rangeSumHelper(range);\n  }\n}\n",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/privaterecursivehelper/Question.java",
      "complexity": 5,
      "features": {
        "featureMap": {
          "ARITHMETIC_OPERATORS": 2,
          "COMPARISON_OPERATORS": 2,
          "IF_STATEMENTS": 2,
          "METHOD": 2,
          "RETURN": 3,
          "CLASS": 1,
          "THROW": 1,
          "NEW_KEYWORD": 1,
          "VISIBILITY_MODIFIERS": 3,
          "STATIC_METHOD": 2,
          "RECURSION": 1
        },
        "importList": [],
        "typeList": [
          "int"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 14,
        "comment": 0,
        "blank": 2
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [],
    "incorrect": [
      {
        "klass": "Question",
        "contents": "public class Question {\n  private static int rangeSumHelper(int range) {\n    int sum = 0;\n    for (int i = 0; i <= range; i++) {\n      sum += i;\n    }\n    return sum;\n  }\n\n  public static int rangeSum(int range) {\n    if (range < 0) {\n      throw new IllegalArgumentException();\n    }\n    return rangeSumHelper(range);\n  }\n}\n",
        "reason": "RECURSION",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/privaterecursivehelper/incorrect/java/iterative/Question.java",
        "starter": false,
        "needed": true
      }
    ],
    "common": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "private-recursive-helper",
    "hasKotlin": false,
    "published": {
      "name": "Private Recursive Helper",
      "type": "KLASS",
      "path": "private-recursive-helper",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "packageName": "com.examples.privaterecursivehelper",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Testing question for recursion checks on private methods.</p>"
      },
      "complexity": {
        "java": 5
      },
      "features": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 2,
            "IF_STATEMENTS": 2,
            "METHOD": 2,
            "RETURN": 3,
            "CLASS": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 3,
            "STATIC_METHOD": 2,
            "RECURSION": 1
          },
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 14,
          "comment": 0,
          "blank": 2
        }
      }
    },
    "fauxStatic": false
  },
  "Maybe Recursive Factorial": {
    "name": "Maybe Recursive Factorial",
    "type": "KLASS",
    "klass": "Question",
    "metadata": {
      "contentHash": "996c3cdb90539d435a2d1a2e2527cdc6",
      "packageName": "com.examples.mayberecursivefactorial",
      "version": "2022.7.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Write a class method that provides an implementation of factorial, accepting and returning <code>long</code> arguments.\nThrow an <code>IllegalArgumentException</code> on invalid inputs.\nYour implementation can be recursive or not.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/mayberecursivefactorial/correct/java/iterative/Question.java"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FixedParameters;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n/*\n * Write a class method that provides an implementation of factorial, accepting and returning `long` arguments.\n * Throw an `IllegalArgumentException` on invalid inputs.\n * Your implementation can be recursive or not.\n */\n\n@Correct(name = \"Maybe Recursive Factorial\", version = \"2022.7.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  public static long factorial(long input) {\n    if (input <= 0) { // mutate-disable-conditional-boundary\n      throw new IllegalArgumentException();\n    }\n    if (input == 1) {\n      return 1;\n    }\n    return input * factorial(input - 1);\n  }\n\n  @FixedParameters private static final List<Long> FIXED = Arrays.asList(-10L, -1L, 0L, 1L, 2L);\n\n  @RandomParameters\n  private static long randomParameters(Random random) {\n    return random.nextInt(32);\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/mayberecursivefactorial/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "public class Question {\n  public static long factorial(long input) {\n    if (input <= 0) { // mutate-disable-conditional-boundary\n      throw new IllegalArgumentException();\n    }\n    if (input == 1) {\n      return 1;\n    }\n    return input * factorial(input - 1);\n  }\n}\n",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/mayberecursivefactorial/Question.java",
      "complexity": 4,
      "features": {
        "featureMap": {
          "ARITHMETIC_OPERATORS": 2,
          "COMPARISON_OPERATORS": 2,
          "IF_STATEMENTS": 2,
          "METHOD": 1,
          "RETURN": 2,
          "CLASS": 1,
          "THROW": 1,
          "NEW_KEYWORD": 1,
          "VISIBILITY_MODIFIERS": 2,
          "STATIC_METHOD": 1,
          "RECURSION": 1
        },
        "importList": [],
        "typeList": [
          "long"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 11,
        "comment": 0,
        "blank": 1
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [
      {
        "klass": "Question",
        "contents": "public class Question {\n  public static long factorial(long input) {\n    if (input <= 0) {\n      throw new IllegalArgumentException();\n    }\n    long result = 1;\n    for (long multiplier = 2; multiplier <= input; multiplier++) {\n      result *= multiplier;\n    }\n    return result;\n  }\n}\n",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/mayberecursivefactorial/correct/java/iterative/Question.java",
        "complexity": 4,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 2,
            "VARIABLE_ASSIGNMENTS": 2,
            "VARIABLE_REASSIGNMENTS": 2,
            "UNARY_OPERATORS": 1,
            "ASSIGNMENT_OPERATORS": 1,
            "COMPARISON_OPERATORS": 2,
            "IF_STATEMENTS": 1,
            "FOR_LOOPS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "importList": [],
          "typeList": [
            "long"
          ],
          "identifierList": [
            "result",
            "multiplier"
          ],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 12,
          "comment": 0,
          "blank": 1
        },
        "expectedDeadCount": 1
      }
    ],
    "incorrect": [],
    "common": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "maybe-recursive-factorial",
    "hasKotlin": false,
    "published": {
      "name": "Maybe Recursive Factorial",
      "type": "KLASS",
      "path": "maybe-recursive-factorial",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "packageName": "com.examples.mayberecursivefactorial",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Write a class method that provides an implementation of factorial, accepting and returning <code>long</code> arguments.\nThrow an <code>IllegalArgumentException</code> on invalid inputs.\nYour implementation can be recursive or not.</p>"
      },
      "complexity": {
        "java": 4
      },
      "features": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 2,
            "IF_STATEMENTS": 2,
            "METHOD": 1,
            "RETURN": 2,
            "CLASS": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "RECURSION": 1
          },
          "importList": [],
          "typeList": [
            "long"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 11,
          "comment": 0,
          "blank": 1
        }
      }
    },
    "fauxStatic": false
  },
  "Add One Class": {
    "name": "Add One Class",
    "type": "KLASS",
    "klass": "Question",
    "metadata": {
      "contentHash": "144cc102fd3530a84a5e30737e94336c",
      "packageName": "com.examples.addoneclass",
      "version": "2021.6.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Write a class named <code>Question</code> with a single <code>static</code> method <code>addOne</code> that returns its <code>int</code> argument plus one.</p>",
      "kotlinDescription": "<p>Write a function <code>addOne</code> that returns its <code>Int</code> argument plus one.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/addoneclass/correct/kotlin/Question.kt"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Write a class named `Question` with a single `static` method `addOne` that returns its `int` argument plus one.\n */\n\n@Correct(name = \"Add One Class\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\npublic class Question {\n  public static int addOne(int value) {\n    return value + 1;\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addoneclass/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "public class Question {\n  public static int addOne(int value) {\n    return value + 1;\n  }\n}\n",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addoneclass/Question.java",
      "complexity": 1,
      "features": {
        "featureMap": {
          "ARITHMETIC_OPERATORS": 1,
          "METHOD": 1,
          "RETURN": 1,
          "CLASS": 1,
          "VISIBILITY_MODIFIERS": 2,
          "STATIC_METHOD": 1
        },
        "importList": [],
        "typeList": [
          "int"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 5,
        "comment": 0,
        "blank": 1
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [
      {
        "klass": "QuestionKt",
        "contents": "fun addOne(value: Int): Int {\n  return value + 1\n}",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addoneclass/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      }
    ],
    "incorrect": [],
    "common": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "add-one-class",
    "kotlinSolution": {
      "klass": "QuestionKt",
      "contents": "fun addOne(value: Int): Int {\n  return value + 1\n}",
      "language": "kotlin",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addoneclass/correct/kotlin/Question.kt",
      "complexity": 1,
      "features": {
        "featureMap": {
          "METHOD": 1
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 3,
        "comment": 0,
        "blank": 0
      }
    },
    "hasKotlin": true,
    "published": {
      "name": "Add One Class",
      "type": "KLASS",
      "path": "add-one-class",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "packageName": "com.examples.addoneclass",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Write a class named <code>Question</code> with a single <code>static</code> method <code>addOne</code> that returns its <code>int</code> argument plus one.</p>",
        "kotlin": "<p>Write a function <code>addOne</code> that returns its <code>Int</code> argument plus one.</p>"
      },
      "complexity": {
        "java": 1,
        "kotlin": 1
      },
      "features": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "METHOD": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 5,
          "comment": 0,
          "blank": 1
        },
        "kotlin": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "Cougar Feliform": {
    "name": "Cougar Feliform",
    "type": "KLASS",
    "klass": "Cougar",
    "metadata": {
      "contentHash": "858c7009ae6211d3f4f7f0bcff4d091c",
      "packageName": "com.examples.cougarfeliform",
      "version": "2021.7.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Create and complete the implementation of the <code>Cougar</code> class.\nYour class should be public, not final and not abstract, inherit from the <code>Feliform</code> class,\nand provide the following methods:</p><ol><li>Constructor that takes a <code>int</code> parameter <code>speed</code> and a second <code>weight</code>.\nCreates a new <code>Cougar</code> with the passed speed and weight.\nYou should call the <code>Feliform</code> constructor and pass it the <code>String</code> &quot;cougar&quot; to identify the type of this\nfeliform.</li><li>Public instance method <code>dangerousness</code> that takes no arguments and returns an <code>int</code>.\nReturn the dangerousness of this cougar which equals its speed times its weight.</li><li>Override <code>public boolean equals(Object other)</code>.\nReturn <code>true</code> if <code>other</code> is a <code>Cougar</code> with the same speed and weight, and <code>false</code> otherwise.\nNote that <code>other</code> may be <code>null</code> or not a <code>Housecat</code>.</li></ol><p>Finally, note that your class should not expose any of its internal state publicly.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/cougarfeliform/Feliform.java"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Cougar",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.Both;\nimport edu.illinois.cs.cs125.jenisol.core.Limit;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Create and complete the implementation of the `Cougar` class.\n * Your class should be public, not final and not abstract, inherit from the `Feliform` class,\n * and provide the following methods:\n *\n * 1. Constructor that takes a `int` parameter `speed` and a second `weight`.\n * Creates a new `Cougar` with the passed speed and weight.\n * You should call the `Feliform` constructor and pass it the `String` \"cougar\" to identify the type of this\n * feliform.\n * 1. Public instance method `dangerousness` that takes no arguments and returns an `int`.\n * Return the dangerousness of this cougar which equals its speed times its weight.\n * 1. Override `public boolean equals(Object other)`.\n * Return `true` if `other` is a `Cougar` with the same speed and weight, and `false` otherwise.\n * Note that `other` may be `null` or not a `Housecat`.\n *\n * Finally, note that your class should not expose any of its internal state publicly.\n */\n@Correct(name = \"Cougar Feliform\", version = \"2021.7.0\", author = \"challen@illinois.edu\")\npublic class Cougar extends Feliform {\n  private final int speed;\n  private final int weight;\n\n  public Cougar(int setSpeed, int setWeight) {\n    super(\"cougar\");\n    speed = setSpeed;\n    weight = setWeight;\n  }\n\n  @Override\n  public int dangerousness() {\n    return speed * weight;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof Cougar housecat)) {\n      return false;\n    }\n    return speed == housecat.speed && weight == housecat.weight;\n  }\n\n  @Both\n  @Limit(1)\n  public static String getType(Feliform feliform) {\n    return feliform.getType();\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/cougarfeliform/Cougar.java"
    },
    "correct": {
      "klass": "Cougar",
      "contents": "public class Cougar extends Feliform {\n  private final int speed;\n  private final int weight;\n\n  public Cougar(int setSpeed, int setWeight) {\n    super(\"cougar\");\n    speed = setSpeed;\n    weight = setWeight;\n  }\n\n  public int dangerousness() {\n    return speed * weight;\n  }\n\n  public boolean equals(Object o) {\n    if (!(o instanceof Cougar housecat)) {\n      return false;\n    }\n    return speed == housecat.speed && weight == housecat.weight;\n  }\n}\n",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/cougarfeliform/Cougar.java",
      "complexity": 5,
      "features": {
        "featureMap": {
          "VARIABLE_REASSIGNMENTS": 2,
          "ARITHMETIC_OPERATORS": 1,
          "COMPARISON_OPERATORS": 2,
          "LOGICAL_OPERATORS": 2,
          "IF_STATEMENTS": 1,
          "METHOD": 2,
          "RETURN": 3,
          "CONSTRUCTOR": 1,
          "INSTANCEOF": 1,
          "CLASS": 1,
          "EXTENDS": 1,
          "SUPER": 1,
          "VISIBILITY_MODIFIERS": 6,
          "FINAL_FIELD": 2,
          "DOT_NOTATION": 2,
          "DOTTED_VARIABLE_ACCESS": 2
        },
        "importList": [],
        "typeList": [
          "Feliform",
          "int",
          "boolean",
          "Object",
          "Cougar"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 18,
        "comment": 0,
        "blank": 4
      },
      "expectedDeadCount": 0
    },
    "alternativeSolutions": [],
    "incorrect": [],
    "common": [
      "public abstract class Feliform {\n  private final String type;\n\n  public Feliform(String setType) {\n    type = setType;\n  }\n\n  public String getType() {\n    return type;\n  }\n\n  public abstract int dangerousness();\n}\n"
    ],
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "cougar-feliform",
    "hasKotlin": false,
    "published": {
      "name": "Cougar Feliform",
      "type": "KLASS",
      "path": "cougar-feliform",
      "author": "challen@illinois.edu",
      "version": "2021.7.0",
      "packageName": "com.examples.cougarfeliform",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Create and complete the implementation of the <code>Cougar</code> class.\nYour class should be public, not final and not abstract, inherit from the <code>Feliform</code> class,\nand provide the following methods:</p><ol><li>Constructor that takes a <code>int</code> parameter <code>speed</code> and a second <code>weight</code>.\nCreates a new <code>Cougar</code> with the passed speed and weight.\nYou should call the <code>Feliform</code> constructor and pass it the <code>String</code> &quot;cougar&quot; to identify the type of this\nfeliform.</li><li>Public instance method <code>dangerousness</code> that takes no arguments and returns an <code>int</code>.\nReturn the dangerousness of this cougar which equals its speed times its weight.</li><li>Override <code>public boolean equals(Object other)</code>.\nReturn <code>true</code> if <code>other</code> is a <code>Cougar</code> with the same speed and weight, and <code>false</code> otherwise.\nNote that <code>other</code> may be <code>null</code> or not a <code>Housecat</code>.</li></ol><p>Finally, note that your class should not expose any of its internal state publicly.</p>"
      },
      "complexity": {
        "java": 5
      },
      "features": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 2,
            "ARITHMETIC_OPERATORS": 1,
            "COMPARISON_OPERATORS": 2,
            "LOGICAL_OPERATORS": 2,
            "IF_STATEMENTS": 1,
            "METHOD": 2,
            "RETURN": 3,
            "CONSTRUCTOR": 1,
            "INSTANCEOF": 1,
            "CLASS": 1,
            "EXTENDS": 1,
            "SUPER": 1,
            "VISIBILITY_MODIFIERS": 6,
            "FINAL_FIELD": 2,
            "DOT_NOTATION": 2,
            "DOTTED_VARIABLE_ACCESS": 2
          },
          "importList": [],
          "typeList": [
            "Feliform",
            "int",
            "boolean",
            "Object",
            "Cougar"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 18,
          "comment": 0,
          "blank": 4
        }
      }
    },
    "fauxStatic": false
  },
  "Print Hello": {
    "name": "Print Hello",
    "type": "SNIPPET",
    "klass": "Question",
    "metadata": {
      "contentHash": "3ad0744ce5defd4539f5b07fbda0cd9a",
      "packageName": "com.examples.printhello",
      "version": "2022.7.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Print &quot;Hello!&quot; without the quotes.\nUsing to test support for @Limit annotations.</p>",
      "usedFiles": [],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.Limit;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Print \"Hello!\" without the quotes.\n * Using to test support for @Limit annotations.\n */\n\n@Correct(name = \"Print Hello\", author = \"challen@illinois.edu\", version = \"2022.7.0\")\npublic class Question {\n  @Limit(1)\n  public static void printHello() {\n    // TEMPLATE_START\n    System.out.println(\"Hello!\");\n    // TEMPLATE_END\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/printhello/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "System.out.println(\"Hello!\");",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/printhello/Question.java",
      "complexity": 1,
      "features": {
        "featureMap": {
          "PRINT_STATEMENTS": 1
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": [
          "println"
        ]
      },
      "lineCount": {
        "source": 1,
        "comment": 0,
        "blank": 0
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [],
    "incorrect": [],
    "common": [],
    "javaTemplate": "public class Question {\n  public static void printHello() {\n    {{{ contents }}}\n  }\n}\n",
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "print-hello",
    "hasKotlin": false,
    "published": {
      "name": "Print Hello",
      "type": "SNIPPET",
      "path": "print-hello",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "packageName": "com.examples.printhello",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Print &quot;Hello!&quot; without the quotes.\nUsing to test support for @Limit annotations.</p>"
      },
      "complexity": {
        "java": 1
      },
      "features": {
        "java": {
          "featureMap": {
            "PRINT_STATEMENTS": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "println"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 1,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "With Imports": {
    "name": "With Imports",
    "type": "KLASS",
    "klass": "Question",
    "metadata": {
      "contentHash": "cb19a8122edb12c3937dd28e4820ca15",
      "packageName": "com.examples.withimports",
      "version": "2022.7.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Example to test use of import statements.</p>",
      "kotlinDescription": "<p>Test Kotlin top-level method with import statements.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/withimports/correct/kotlin/Question.kt"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n/*\n * Example to test use of import statements.\n */\n\n@Correct(name = \"With Imports\", version = \"2022.7.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  public static List<Integer> max(int first, int second) {\n    return Arrays.asList(first, second);\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withimports/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "import java.util.Arrays;\nimport java.util.List;\n\npublic class Question {\n  public static List<Integer> max(int first, int second) {\n    return Arrays.asList(first, second);\n  }\n}\n",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withimports/Question.java",
      "complexity": 1,
      "features": {
        "featureMap": {
          "METHOD": 1,
          "RETURN": 1,
          "CLASS": 1,
          "VISIBILITY_MODIFIERS": 2,
          "STATIC_METHOD": 1,
          "IMPORT": 2,
          "BOXING_CLASSES": 1,
          "TYPE_PARAMETERS": 1,
          "DOT_NOTATION": 1,
          "DOTTED_METHOD_CALL": 1
        },
        "importList": [
          "java.util.Arrays",
          "java.util.List"
        ],
        "typeList": [
          "List<Integer>",
          "Integer",
          "int"
        ],
        "identifierList": [],
        "dottedMethodList": [
          "asList"
        ]
      },
      "lineCount": {
        "source": 7,
        "comment": 0,
        "blank": 2
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [
      {
        "klass": "QuestionKt",
        "contents": "import java.util.Arrays\n\n\nfun max(first: Int, second: Int): List<Int> {\n  return Arrays.asList(first, second)\n}",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withimports/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "asList"
          ]
        },
        "lineCount": {
          "source": 4,
          "comment": 0,
          "blank": 2
        }
      }
    ],
    "incorrect": [],
    "common": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "with-imports",
    "kotlinSolution": {
      "klass": "QuestionKt",
      "contents": "import java.util.Arrays\n\n\nfun max(first: Int, second: Int): List<Int> {\n  return Arrays.asList(first, second)\n}",
      "language": "kotlin",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withimports/correct/kotlin/Question.kt",
      "complexity": 1,
      "features": {
        "featureMap": {
          "METHOD": 1,
          "DOT_NOTATION": 1,
          "DOTTED_METHOD_CALL": 1
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": [
          "asList"
        ]
      },
      "lineCount": {
        "source": 4,
        "comment": 0,
        "blank": 2
      }
    },
    "hasKotlin": true,
    "published": {
      "name": "With Imports",
      "type": "KLASS",
      "path": "with-imports",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "packageName": "com.examples.withimports",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Example to test use of import statements.</p>",
        "kotlin": "<p>Test Kotlin top-level method with import statements.</p>"
      },
      "complexity": {
        "java": 1,
        "kotlin": 1
      },
      "features": {
        "java": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "IMPORT": 2,
            "BOXING_CLASSES": 1,
            "TYPE_PARAMETERS": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "importList": [
            "java.util.Arrays",
            "java.util.List"
          ],
          "typeList": [
            "List<Integer>",
            "Integer",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "asList"
          ]
        },
        "kotlin": {
          "featureMap": {
            "METHOD": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "asList"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 7,
          "comment": 0,
          "blank": 2
        },
        "kotlin": {
          "source": 4,
          "comment": 0,
          "blank": 2
        }
      }
    },
    "fauxStatic": false
  },
  "Add One": {
    "name": "Add One",
    "type": "METHOD",
    "klass": "Question",
    "metadata": {
      "contentHash": "1de3e62a1da5371e08f407b53e2861c9",
      "packageName": "com.examples.addone",
      "version": "2021.6.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Write a method <code>addOne</code> that returns its <code>int</code> argument plus one.</p>",
      "kotlinDescription": "<p>Write a method <code>addOne</code> that returns its <code>Int</code> argument plus one.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/incorrect/java/timeout/Question.java",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/incorrect/java/toolong/Question.java",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/incorrect/java/memorylimit/Question.java",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/incorrect/java/deadcode/Question.java",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/correct/java/Question.java",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/correct/kotlin/Question.kt"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\n\n/*\n * Write a method `addOne` that returns its `int` argument plus one.\n */\n\n@Correct(name = \"Add One\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\n@Wrap\npublic class Question {\n  int addOne(int value) {\n    return value + 1;\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "int addOne(int value) {\n  return value + 1;\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/Question.java",
      "complexity": 1,
      "features": {
        "featureMap": {
          "ARITHMETIC_OPERATORS": 1,
          "METHOD": 1,
          "RETURN": 1
        },
        "importList": [],
        "typeList": [
          "int"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 3,
        "comment": 0,
        "blank": 0
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [
      {
        "klass": "Question",
        "contents": "int addOne(int value) {\n  return value + 2 - 1;\n}",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/correct/java/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "METHOD": 1,
            "RETURN": 1
          },
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 1
      },
      {
        "klass": "Question",
        "contents": "// Note that this question was originally set up a bit differently in the demo video.\n// Now Kotlin solutions that use @file:AlsoCorrect will not be templated when @Wrap is used on the solution.\n// So the Kotlin solution should follow the class design established by the Java code, even for faux-static methods.\nfun addOne(value: Int): Int {\n  return value + 1\n}",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 3,
          "blank": 0
        }
      }
    ],
    "incorrect": [
      {
        "klass": "Question",
        "contents": "int addOne(int value) {\n  int j = 0;\n  for (int i = 0; i < 1024; i++) {\n    j++;\n  }\n  return value + 1;\n}",
        "reason": "LINECOUNT",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/incorrect/java/timeout/Question.java",
        "starter": false,
        "needed": true
      },
      {
        "klass": "Question",
        "contents": "int addOne(int value) {\n  int toReturn = value + 1;\n  toReturn -= 1;\n  toReturn += 1;\n  toReturn -= 1;\n  toReturn += 1;\n  toReturn -= 1;\n  toReturn += 1;\n  return toReturn;\n}",
        "reason": "TOOLONG",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/incorrect/java/toolong/Question.java",
        "starter": false,
        "needed": true
      },
      {
        "klass": "Question",
        "contents": "private final int[] values = new int[1024];\n\nint addOne(int value) {\n  return value + 1;\n}",
        "reason": "MEMORYLIMIT",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/incorrect/java/memorylimit/Question.java",
        "starter": false,
        "needed": true
      },
      {
        "klass": "Question",
        "contents": "int addOne(int value) {\n  if (value == 1234567) {\n    return 1234568;\n  }\n  return value + 1;\n}",
        "reason": "DEADCODE",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/incorrect/java/deadcode/Question.java",
        "starter": false,
        "needed": true
      }
    ],
    "common": [],
    "javaTemplate": "public class Question {\n  {{{ contents }}}\n}",
    "kotlinTemplate": "class Question {\n  {{{ contents }}}\n}",
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "add-one",
    "kotlinSolution": {
      "klass": "Question",
      "contents": "// Note that this question was originally set up a bit differently in the demo video.\n// Now Kotlin solutions that use @file:AlsoCorrect will not be templated when @Wrap is used on the solution.\n// So the Kotlin solution should follow the class design established by the Java code, even for faux-static methods.\nfun addOne(value: Int): Int {\n  return value + 1\n}",
      "language": "kotlin",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/addone/correct/kotlin/Question.kt",
      "complexity": 1,
      "features": {
        "featureMap": {
          "METHOD": 1
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 3,
        "comment": 3,
        "blank": 0
      }
    },
    "hasKotlin": true,
    "published": {
      "name": "Add One",
      "type": "METHOD",
      "path": "add-one",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "packageName": "com.examples.addone",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Write a method <code>addOne</code> that returns its <code>int</code> argument plus one.</p>",
        "kotlin": "<p>Write a method <code>addOne</code> that returns its <code>Int</code> argument plus one.</p>"
      },
      "complexity": {
        "java": 1,
        "kotlin": 1
      },
      "features": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1
          },
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "METHOD": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "kotlin": {
          "source": 3,
          "comment": 3,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "Kotlin Null Test": {
    "name": "Kotlin Null Test",
    "type": "KLASS",
    "klass": "Question",
    "metadata": {
      "contentHash": "1dd99e7ac3924f1494c070aa28019d6d",
      "packageName": "com.examples.kotlinnulltest",
      "version": "2022.6.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Return the length of a string.\nHere for Kotlin null memory usage checking.</p>",
      "kotlinDescription": "<p>Return the length of a string.\nHere for Kotlin null memory usage checking.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/kotlinnulltest/correct/kotlin/reference/Question.kt",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/kotlinnulltest/correct/kotlin/nonnullparameter/Question.kt"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Return the length of a string.\n * Here for Kotlin null memory usage checking.\n */\n\n@Correct(name = \"Kotlin Null Test\", version = \"2022.6.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  public static int length(String test) {\n    assert test != null;\n    return test.length();\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/kotlinnulltest/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "public class Question {\n  public static int length(String test) {\n    assert test != null;\n    return test.length();\n  }\n}\n",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/kotlinnulltest/Question.java",
      "complexity": 1,
      "features": {
        "featureMap": {
          "COMPARISON_OPERATORS": 1,
          "METHOD": 1,
          "RETURN": 1,
          "STRING": 1,
          "NULL": 1,
          "CLASS": 1,
          "ASSERT": 1,
          "VISIBILITY_MODIFIERS": 2,
          "STATIC_METHOD": 1,
          "DOT_NOTATION": 1,
          "DOTTED_METHOD_CALL": 1
        },
        "importList": [],
        "typeList": [
          "int",
          "String"
        ],
        "identifierList": [],
        "dottedMethodList": [
          "length"
        ]
      },
      "lineCount": {
        "source": 6,
        "comment": 0,
        "blank": 1
      },
      "expectedDeadCount": 2
    },
    "alternativeSolutions": [
      {
        "klass": "QuestionKt",
        "contents": "fun length(test: String?): Int {\n  require(test != null)\n  return test.length\n}",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/kotlinnulltest/correct/kotlin/reference/Question.kt",
        "complexity": 2,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "DOT_NOTATION": 1,
            "DOTTED_VARIABLE_ACCESS": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 4,
          "comment": 0,
          "blank": 0
        }
      },
      {
        "klass": "QuestionKt",
        "contents": "fun length(test: String): Int {\n  return test.length\n}",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/kotlinnulltest/correct/kotlin/nonnullparameter/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "DOT_NOTATION": 1,
            "DOTTED_VARIABLE_ACCESS": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      }
    ],
    "incorrect": [],
    "common": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "kotlin-null-test",
    "kotlinSolution": {
      "klass": "QuestionKt",
      "contents": "fun length(test: String?): Int {\n  require(test != null)\n  return test.length\n}",
      "language": "kotlin",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/kotlinnulltest/correct/kotlin/reference/Question.kt",
      "complexity": 2,
      "features": {
        "featureMap": {
          "METHOD": 1,
          "DOT_NOTATION": 1,
          "DOTTED_VARIABLE_ACCESS": 1
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 4,
        "comment": 0,
        "blank": 0
      }
    },
    "hasKotlin": true,
    "published": {
      "name": "Kotlin Null Test",
      "type": "KLASS",
      "path": "kotlin-null-test",
      "author": "challen@illinois.edu",
      "version": "2022.6.0",
      "packageName": "com.examples.kotlinnulltest",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Return the length of a string.\nHere for Kotlin null memory usage checking.</p>",
        "kotlin": "<p>Return the length of a string.\nHere for Kotlin null memory usage checking.</p>"
      },
      "complexity": {
        "java": 1,
        "kotlin": 1
      },
      "features": {
        "java": {
          "featureMap": {
            "COMPARISON_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "STRING": 1,
            "NULL": 1,
            "CLASS": 1,
            "ASSERT": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "importList": [],
          "typeList": [
            "int",
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "length"
          ]
        },
        "kotlin": {
          "featureMap": {
            "METHOD": 1,
            "DOT_NOTATION": 1,
            "DOTTED_VARIABLE_ACCESS": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 6,
          "comment": 0,
          "blank": 1
        },
        "kotlin": {
          "source": 4,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  },
  "With Feature Check": {
    "name": "With Feature Check",
    "type": "METHOD",
    "klass": "Question",
    "metadata": {
      "contentHash": "7265340f9d922ca3dfe7ff222f5a309d",
      "packageName": "com.examples.withfeaturecheck",
      "version": "2022.7.0",
      "author": "challen@illinois.edu",
      "javaDescription": "<p>Test whether feature checking works.</p>",
      "kotlinDescription": "<p>For testing features.</p>",
      "usedFiles": [
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/withfeaturecheck/incorrect/java/usesloop/Question.java",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/withfeaturecheck/incorrect/kotlin/usesloop/Question.kt",
        "/Users/challen/code/questioner-problems/src/main/java/com/examples/withfeaturecheck/correct/kotlin/Question.kt"
      ],
      "focused": false
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jeed.core.Features;\nimport edu.illinois.cs.cs125.jenisol.core.BoundComplexity;\nimport edu.illinois.cs.cs125.jenisol.core.FilterParameters;\nimport edu.illinois.cs.cs125.jenisol.core.SkipTest;\nimport edu.illinois.cs.cs125.questioner.lib.CheckFeatures;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.FeatureCheckException;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport edu.illinois.cs.cs125.questioner.lib.features.FeatureHelpers;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/*\n * Test whether feature checking works.\n */\n\n@Correct(name = \"With Feature Check\", author = \"challen@illinois.edu\", version = \"2022.7.0\")\n@Wrap\npublic class Question {\n  @FilterParameters\n  private static void filterParameters(int range) {\n    if (range < 0) {\n      throw new SkipTest();\n    }\n    if (range > 1024) {\n      throw new BoundComplexity();\n    }\n  }\n\n  int sumTo(int range) {\n    return (range * (range + 1)) / 2;\n  }\n\n  @CheckFeatures\n  private static List<String> checkFeatures(Features solution, Features submission) {\n    if (FeatureHelpers.usesLoop(submission)) {\n      throw new FeatureCheckException(\"Submission uses a loop\");\n    }\n    return new ArrayList<>();\n  }\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withfeaturecheck/Question.java"
    },
    "correct": {
      "klass": "Question",
      "contents": "int sumTo(int range) {\n  return (range * (range + 1)) / 2;\n}",
      "language": "java",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withfeaturecheck/Question.java",
      "complexity": 1,
      "features": {
        "featureMap": {
          "ARITHMETIC_OPERATORS": 3,
          "METHOD": 1,
          "RETURN": 1
        },
        "importList": [],
        "typeList": [
          "int"
        ],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 3,
        "comment": 0,
        "blank": 0
      },
      "expectedDeadCount": 1
    },
    "alternativeSolutions": [
      {
        "klass": "Question",
        "contents": "fun sumTo(range: Int): Int {\n  return range * (range + 1) / 2\n}",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withfeaturecheck/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      }
    ],
    "incorrect": [
      {
        "klass": "Question",
        "contents": "int sumTo(int range) {\n  int sum = 0;\n  for (int i = 0; i <= range; i++) {\n    sum += i;\n  }\n  return sum;\n}",
        "reason": "FEATURES",
        "language": "java",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withfeaturecheck/incorrect/java/usesloop/Question.java",
        "starter": false,
        "needed": true
      },
      {
        "klass": "Question",
        "contents": "fun sumTo(range: Int): Int {\n  var sum = 0\n  (0..range).forEach { i ->\n    sum += i\n  }\n  return sum\n}",
        "reason": "FEATURES",
        "language": "kotlin",
        "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withfeaturecheck/incorrect/kotlin/usesloop/Question.kt",
        "starter": false,
        "needed": true
      }
    ],
    "common": [],
    "javaTemplate": "public class Question {\n  {{{ contents }}}\n}",
    "kotlinTemplate": "class Question {\n  {{{ contents }}}\n}",
    "importWhitelist": [],
    "importBlacklist": [],
    "slug": "with-feature-check",
    "kotlinSolution": {
      "klass": "Question",
      "contents": "fun sumTo(range: Int): Int {\n  return range * (range + 1) / 2\n}",
      "language": "kotlin",
      "path": "/Users/challen/code/questioner-problems/src/main/java/com/examples/withfeaturecheck/correct/kotlin/Question.kt",
      "complexity": 1,
      "features": {
        "featureMap": {
          "METHOD": 1
        },
        "importList": [],
        "typeList": [],
        "identifierList": [],
        "dottedMethodList": []
      },
      "lineCount": {
        "source": 3,
        "comment": 0,
        "blank": 0
      }
    },
    "hasKotlin": true,
    "published": {
      "name": "With Feature Check",
      "type": "METHOD",
      "path": "with-feature-check",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "packageName": "com.examples.withfeaturecheck",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Test whether feature checking works.</p>",
        "kotlin": "<p>For testing features.</p>"
      },
      "complexity": {
        "java": 1,
        "kotlin": 1
      },
      "features": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 3,
            "METHOD": 1,
            "RETURN": 1
          },
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "METHOD": 1
          },
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "kotlin": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      }
    },
    "fauxStatic": false
  }
}