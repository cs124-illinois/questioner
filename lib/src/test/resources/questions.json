[
  {
    "published": {
      "contentHash": "b1ac253bcd83d89dd8de968bef1aa1eb-v2024.6.1",
      "path": "add-one",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "name": "Add One",
      "type": "METHOD",
      "packageName": "com.github.cs124_illinois.questioner.testing.addone",
      "klass": "Question",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Write a method <code>addOne</code> that returns its <code>int</code> argument plus one.</p>",
        "kotlin": "<p>Write a method <code>addOne</code> that returns its <code>Int</code> argument plus one.</p>"
      },
      "starters": {
        "java": "int addOne(int value) {\n  return 0; // You may need to remove this starter code\n}",
        "kotlin": "fun addOne(value: Int): Int = 0 // You may need to remove this starter code"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 36
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "kotlin": {
          "source": 1,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 1,
        "kotlin": 1
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "java.lang.Integer",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/addone/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/addone/correct/kotlin/Question.kt"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\n\n/*\n * Write a method `addOne` that returns its `int` argument plus one.\n */\n\n@Correct(name = \"Add One\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\n@Wrap(autoStarter = true)\npublic class Question {\n  int addOne(int value) {\n    return value + 1;\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/addone/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "int addOne(int value) {\n  return value + 1;\n}",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/addone/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      },
      "kotlin": {
        "klass": "Question",
        "contents": "fun addOne(value: Int): Int = value + 1",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/addone/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 36
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 1,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "Question",
        "contents": "fun addOne(value: Int): Int = value + 1",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/addone/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 36
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 1,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [
      {
        "klass": "Question",
        "contents": "int addOne(int value) {\n  return 0; // You may need to remove this starter code\n}",
        "reason": "TEST",
        "language": "java",
        "starter": true,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      },
      {
        "klass": "Question",
        "contents": "fun addOne(value: Int): Int = 0 // You may need to remove this starter code",
        "reason": "TEST",
        "language": "kotlin",
        "starter": true,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      }
    ],
    "commonFiles": [],
    "templateByLanguage": {
      "java": "public class Question {\n  {{{ contents }}}\n}",
      "kotlin": "class Question {\n  {{{ contents }}}\n}"
    },
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Integer",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 3072,
        "kotlin": 3072
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      },
      "solutionClassSize": {
        "java": 104,
        "kotlin": 260
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 6016,
        "kotlin": 6016
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 12,
      "mutationCount": 6,
      "solutionMaxRuntime": 13,
      "bootstrapLength": 6541,
      "mutationLength": 23,
      "incorrectLength": 720,
      "calibrationLength": 135,
      "solutionCoverage": {
        "covered": 1,
        "total": 1,
        "missed": 0
      },
      "executionCounts": {
        "java": 192,
        "kotlin": 192
      },
      "memoryAllocation": {
        "java": 352,
        "kotlin": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 500.635
    },
    "fauxStatic": true,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value + 1;",
          "+  return value + 0;"
        ],
        "language": "java",
        "mutation": "PLUS_OR_MINUS_ONE_TO_ZERO",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value + 1;",
          "+  return value + 2;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value + 1;",
          "+  return value - 1;"
        ],
        "language": "java",
        "mutation": "PLUS_TO_MINUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value + 1;",
          "+  return value;"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value + 1;",
          "+  return 1;"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.kt",
          "+++ Incorrect.kt",
          "@@ -1,1 +1,1 @@",
          "-fun addOne(value: Int): Int = value + 1",
          "+fun addOne(value: Int): Int = 0 // You may need to remove this starter code"
        ],
        "language": "kotlin",
        "incorrectIndex": 1,
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value + 1;",
          "+  return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value + 1;",
          "+  return 0; // You may need to remove this starter code"
        ],
        "language": "java",
        "incorrectIndex": 0,
        "testCount": 1,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/addone/Question.java"
  },
  {
    "published": {
      "contentHash": "60b41b4e572f978f8ab8099ee9d4c8c1-v2024.6.1",
      "path": "add-one-class",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "name": "Add One Class",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.addoneclass",
      "klass": "Question",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Write a class named <code>Question</code> with a single <code>static</code> method <code>addOne</code> that returns its <code>int</code>\nargument plus one.</p>",
        "kotlin": "<p>Write a function <code>addOne</code> that returns its <code>Int</code> argument plus one.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 38
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 36
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 5,
          "comment": 0,
          "blank": 1
        },
        "kotlin": {
          "source": 1,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 1,
        "kotlin": 1
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "java.lang.Integer",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/addoneclass/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/addoneclass/correct/kotlin/Question.kt"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Write a class named `Question` with a single `static` method `addOne` that returns its `int`\n * argument plus one.\n */\n\n@Correct(name = \"Add One Class\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\npublic class Question {\n  public static int addOne(int value) {\n    return value + 1;\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/addoneclass/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "public class Question {\n  public static int addOne(int value) {\n    return value + 1;\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/addoneclass/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 38
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 5,
          "comment": 0,
          "blank": 1
        },
        "expectedDeadCount": 0,
        "suppressions": []
      },
      "kotlin": {
        "klass": "QuestionKt",
        "contents": "fun addOne(value: Int): Int = value + 1",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/addoneclass/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 36
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 1,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "QuestionKt",
        "contents": "fun addOne(value: Int): Int = value + 1",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/addoneclass/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 1,
            "METHOD": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 36
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 1,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Integer",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "java.lang.Object",
        "java.lang.Class",
        "QuestionKt",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 3072,
        "kotlin": 3072
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      },
      "solutionClassSize": {
        "java": 104,
        "kotlin": 108
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 11,
      "mutationCount": 6,
      "solutionMaxRuntime": 35,
      "bootstrapLength": 6508,
      "mutationLength": 14,
      "incorrectLength": 456,
      "calibrationLength": 120,
      "solutionCoverage": {
        "covered": 2,
        "total": 2,
        "missed": 0
      },
      "executionCounts": {
        "java": 192,
        "kotlin": 192
      },
      "memoryAllocation": {
        "java": 352,
        "kotlin": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 325.61
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    return value + 1;",
          "+    return value + 2;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    return value + 1;",
          "+    return value;"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    return value + 1;",
          "+    return value - 1;"
        ],
        "language": "java",
        "mutation": "PLUS_TO_MINUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    return value + 1;",
          "+    return 1;"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    return value + 1;",
          "+    return value + 0;"
        ],
        "language": "java",
        "mutation": "PLUS_OR_MINUS_ONE_TO_ZERO",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    return value + 1;",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 1,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/addoneclass/Question.java"
  },
  {
    "published": {
      "contentHash": "05e3220fb2a6cccf89cce606059ba94a-v2024.6.1",
      "path": "bad-extra-private-variable",
      "author": "challen@illinois.edu",
      "version": "2023.10.0",
      "name": "Bad Extra Private Variable",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.badextraprivatevariable",
      "klass": "Child",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Test bad use of superclass method.</p>",
        "kotlin": "<p>Test bad use of superclass method.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 1,
            "ARITHMETIC_OPERATORS": 2,
            "METHOD": 1,
            "RETURN": 1,
            "CONSTRUCTOR": 1,
            "STRING": 4,
            "CLASS": 1,
            "EXTENDS": 1,
            "SUPER": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 4,
            "FINAL_FIELD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "EXTENDS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 34
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 15
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 36
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 56
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "SUPER",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 28
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 9,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 9,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 9,
                "column": 27
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 10,
                "column": 11
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 10,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 10,
                "column": 42
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 12,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "Parent",
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "METHOD": 1,
            "CONSTRUCTOR": 1,
            "STRING": 1,
            "CLASS": 1,
            "EXTENDS": 1,
            "OVERRIDE": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 1
          },
          "featureList": [
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 1,
                "column": 11
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 1,
                "column": 12
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 12
              }
            },
            {
              "feature": "EXTENDS",
              "location": {
                "line": 1,
                "column": 65
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 82
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "OVERRIDE",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 28
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 3,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 10,
          "comment": 0,
          "blank": 3
        },
        "kotlin": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 2,
        "kotlin": 2
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "Parent",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "Parent",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/Child.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/Parent.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/correct/kotlin/Child.kt",
        "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/incorrect/java/extraprivatefield/Child.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/incorrect/kotlin/extraprivatefield/Child.kt"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Child",
      "contents": "import edu.illinois.cs.cs125.jeed.core.FeatureName;\nimport edu.illinois.cs.cs125.jeed.core.Features;\nimport edu.illinois.cs.cs125.jenisol.core.Both;\nimport edu.illinois.cs.cs125.questioner.lib.CheckFeatures;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.FeatureCheckException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/*\n * Test bad use of superclass method.\n */\n\n@Correct(\n    name = \"Bad Extra Private Variable\",\n    version = \"2023.10.0\",\n    author = \"challen@illinois.edu\")\npublic class Child extends Parent {\n  private final String firstName;\n\n  public Child(String setFirstName, String setLastName) {\n    super(setLastName);\n    firstName = setFirstName;\n  }\n\n  @Override\n  public String toString() {\n    return firstName + \" \" + getLastName();\n  }\n\n  @CheckFeatures\n  private static List<String> checkFeatures(Features solution, Features submission) {\n    int solutionVariableCount = solution.getFeatureMap().getOrDefault(FeatureName.CLASS_FIELD, 0);\n    int submissionVariableCount =\n        submission.getFeatureMap().getOrDefault(FeatureName.CLASS_FIELD, 0);\n    if (submissionVariableCount > solutionVariableCount) {\n      throw new FeatureCheckException(\"Submission declares too many fields\");\n    }\n    return new ArrayList<>();\n  }\n\n  @Both\n  private static String checkName(Parent parent) {\n    return parent.getLastName();\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/Child.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Child",
        "contents": "public class Child extends Parent {\n  private final String firstName;\n\n  public Child(String setFirstName, String setLastName) {\n    super(setLastName);\n    firstName = setFirstName;\n  }\n\n  public String toString() {\n    return firstName + \" \" + getLastName();\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/Child.java",
        "complexity": 2,
        "features": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 1,
            "ARITHMETIC_OPERATORS": 2,
            "METHOD": 1,
            "RETURN": 1,
            "CONSTRUCTOR": 1,
            "STRING": 4,
            "CLASS": 1,
            "EXTENDS": 1,
            "SUPER": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 4,
            "FINAL_FIELD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "EXTENDS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 34
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 15
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 36
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 56
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "SUPER",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 28
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 9,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 9,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 9,
                "column": 27
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 10,
                "column": 11
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 10,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 10,
                "column": 42
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 12,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "Parent",
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 10,
          "comment": 0,
          "blank": 3
        },
        "expectedDeadCount": 0,
        "suppressions": []
      },
      "kotlin": {
        "klass": "Child",
        "contents": "class Child(private val firstName: String?, lastName: String?) : Parent(lastName) {\n  override fun toString() = \"$firstName $lastName\"\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/correct/kotlin/Child.kt",
        "complexity": 2,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "CONSTRUCTOR": 1,
            "STRING": 1,
            "CLASS": 1,
            "EXTENDS": 1,
            "OVERRIDE": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 1
          },
          "featureList": [
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 1,
                "column": 11
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 1,
                "column": 12
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 12
              }
            },
            {
              "feature": "EXTENDS",
              "location": {
                "line": 1,
                "column": 65
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 82
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "OVERRIDE",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 28
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 3,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "Child",
        "contents": "class Child(private val firstName: String?, lastName: String?) : Parent(lastName) {\n  override fun toString() = \"$firstName $lastName\"\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/correct/kotlin/Child.kt",
        "complexity": 2,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "CONSTRUCTOR": 1,
            "STRING": 1,
            "CLASS": 1,
            "EXTENDS": 1,
            "OVERRIDE": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 1
          },
          "featureList": [
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 1,
                "column": 11
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 1,
                "column": 12
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 12
              }
            },
            {
              "feature": "EXTENDS",
              "location": {
                "line": 1,
                "column": 65
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 82
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "OVERRIDE",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 28
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 3,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [
      {
        "klass": "Child",
        "contents": "public class Child extends Parent {\n  private final String firstName;\n  private final String lastName;\n\n  public Child(String setFirstName, String setLastName) {\n    super(setLastName);\n    lastName = setLastName;\n    firstName = setFirstName;\n  }\n\n  public String toString() {\n    return firstName + \" \" + lastName;\n  }\n}\n",
        "reason": "FEATURES",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/incorrect/java/extraprivatefield/Child.java",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      },
      {
        "klass": "Child",
        "contents": "class Child(private val firstName: String?, private val lastName: String?) : Parent(lastName) {\n  override fun toString() = \"$firstName $lastName\"\n}",
        "reason": "FEATURES",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/incorrect/kotlin/extraprivatefield/Child.kt",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      }
    ],
    "commonFiles": [
      {
        "klass": "Parent",
        "contents": "public class Parent {\n  private final String lastName;\n\n  public Parent(String setLastName) {\n    lastName = setLastName;\n  }\n\n  public String getLastName() {\n    return lastName;\n  }\n}\n",
        "language": "java"
      }
    ],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 123,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "Parent",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.invoke.StringConcatFactory",
        "Child",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "Parent",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.invoke.StringConcatFactory",
        "Child",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 7248,
        "kotlin": 4176
      },
      "allocationLimit": {
        "java": 170240,
        "kotlin": 170240
      },
      "solutionClassSize": {
        "java": 757,
        "kotlin": 1008
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 984,
      "executionCountLimit": {
        "java": 1968,
        "kotlin": 1968
      },
      "allocationLimit": {
        "java": 1383808,
        "kotlin": 1383808
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 123,
      "mutationCount": 14,
      "solutionMaxRuntime": 16,
      "bootstrapLength": 3880,
      "mutationLength": 24,
      "incorrectLength": 1097,
      "calibrationLength": 383,
      "solutionCoverage": {
        "covered": 4,
        "total": 4,
        "missed": 0
      },
      "executionCounts": {
        "java": 453,
        "kotlin": 261
      },
      "memoryAllocation": {
        "java": 10640,
        "kotlin": 10640
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 248.892
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return firstName + \"i\" + getLastName();"
        ],
        "language": "java",
        "incorrectIndex": 1,
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return \"\";"
        ],
        "language": "java",
        "incorrectIndex": 0,
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return getLastName();"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return firstName + \"6\" + getLastName();"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return \" \" + getLastName();"
        ],
        "language": "java",
        "mutation": "NULL_RETURN",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return firstName + \"B\" + getLastName();"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return firstName + \"S\" + getLastName();"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return firstName + getLastName();"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return null;"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    return firstName + \" \" + getLastName();",
          "+    return firstName + \" \";"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 7,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/badextraprivatevariable/Child.java"
  },
  {
    "published": {
      "contentHash": "59f3453763803120e38f9719ce636c7f-v2024.6.1",
      "path": "classroom-getters-and-setters",
      "author": "challen@illinois.edu",
      "version": "2022.9.0",
      "name": "Classroom Getters and Setters",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.withgettersandsetters",
      "klass": "Classroom",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Getter and setter testing.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 3,
            "COMPARISON_OPERATORS": 3,
            "METHOD": 3,
            "RETURN": 2,
            "CONSTRUCTOR": 1,
            "GETTER": 2,
            "SETTER": 1,
            "STRING": 3,
            "NULL": 1,
            "CLASS": 1,
            "ASSERT": 3,
            "REFERENCE_EQUALITY": 1,
            "CLASS_FIELD": 2,
            "VISIBILITY_MODIFIERS": 7,
            "FINAL_FIELD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 23
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 5,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 5,
                "column": 19
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 5,
                "column": 54
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 6,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "NULL",
              "location": {
                "line": 7,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 26
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 18
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 28
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 12,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 12,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 12,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 12,
                "column": 27
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 13,
                "column": 19
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 14,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 16,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 16,
                "column": 9
              }
            },
            {
              "feature": "SETTER",
              "location": {
                "line": 16,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 16,
                "column": 45
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 17,
                "column": 4
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 17,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 17,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 17,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 18,
                "column": 28
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 19,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 21,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 21,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 21,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 21,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 21,
                "column": 26
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 22,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 22,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 22,
                "column": 15
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 23,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 24,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "String",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 20,
          "comment": 0,
          "blank": 5
        }
      },
      "complexity": {
        "java": 7
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Throwable",
          "java.lang.AssertionError",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withgettersandsetters/Classroom.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Classroom",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Getter and setter testing.\n */\n\n@Correct(\n    name = \"Classroom Getters and Setters\",\n    version = \"2022.9.0\",\n    author = \"challen@illinois.edu\")\npublic class Classroom {\n  private final String name;\n  private int capacity;\n\n  public Classroom(String setName, int setEnrollment) {\n    assert setEnrollment >= 0;\n    assert setName != null;\n    name = setName;\n    capacity = setEnrollment;\n  }\n\n  public int getCapacity() {\n    return capacity;\n  }\n\n  public void setCapacity(int setEnrollment) {\n    assert setEnrollment >= 0;\n    capacity = setEnrollment;\n  }\n\n  public String getName() {\n    return name;\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withgettersandsetters/Classroom.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Classroom",
        "contents": "public class Classroom {\n  private final String name;\n  private int capacity;\n\n  public Classroom(String setName, int setEnrollment) {\n    assert setEnrollment >= 0;\n    assert setName != null;\n    name = setName;\n    capacity = setEnrollment;\n  }\n\n  public int getCapacity() {\n    return capacity;\n  }\n\n  public void setCapacity(int setEnrollment) {\n    assert setEnrollment >= 0;\n    capacity = setEnrollment;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withgettersandsetters/Classroom.java",
        "complexity": 7,
        "features": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 3,
            "COMPARISON_OPERATORS": 3,
            "METHOD": 3,
            "RETURN": 2,
            "CONSTRUCTOR": 1,
            "GETTER": 2,
            "SETTER": 1,
            "STRING": 3,
            "NULL": 1,
            "CLASS": 1,
            "ASSERT": 3,
            "REFERENCE_EQUALITY": 1,
            "CLASS_FIELD": 2,
            "VISIBILITY_MODIFIERS": 7,
            "FINAL_FIELD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 23
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 5,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 5,
                "column": 19
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 5,
                "column": 54
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 6,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "NULL",
              "location": {
                "line": 7,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 26
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 18
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 28
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 12,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 12,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 12,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 12,
                "column": 27
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 13,
                "column": 19
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 14,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 16,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 16,
                "column": 9
              }
            },
            {
              "feature": "SETTER",
              "location": {
                "line": 16,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 16,
                "column": 45
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 17,
                "column": 4
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 17,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 17,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 17,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 18,
                "column": 28
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 19,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 21,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 21,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 21,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 21,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 21,
                "column": 26
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 22,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 22,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 22,
                "column": 15
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 23,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 24,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "String",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 20,
          "comment": 0,
          "blank": 5
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 75,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Throwable",
        "java.lang.AssertionError",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Classroom",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 6880
      },
      "allocationLimit": {
        "java": 2165632
      },
      "solutionClassSize": {
        "java": 769
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 600,
      "executionCountLimit": {
        "java": 1200,
        "kotlin": 1200
      },
      "allocationLimit": {
        "java": 22124032,
        "kotlin": 22124032
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 75,
      "mutationCount": 17,
      "solutionMaxRuntime": 8,
      "bootstrapLength": 1872,
      "mutationLength": 163,
      "incorrectLength": 1682,
      "calibrationLength": 21,
      "solutionCoverage": {
        "covered": 12,
        "total": 12,
        "missed": 0
      },
      "executionCounts": {
        "java": 430
      },
      "memoryAllocation": {
        "java": 135352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 511.437
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    assert setEnrollment >= 0;",
          "+    assert setEnrollment < 0;"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-    assert setName != null;",
          "+    assert setName == null;"
        ],
        "language": "java",
        "mutation": "CONDITIONAL_BOUNDARY",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -17,1 +17,1 @@",
          "-    assert setEnrollment >= 0;",
          "+    assert setEnrollment < 0;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -22,1 +22,1 @@",
          "-    return name;",
          "+    return null;"
        ],
        "language": "java",
        "mutation": "NULL_RETURN",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -13,1 +13,1 @@",
          "-    return capacity;",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -17,1 +17,1 @@",
          "-    assert setEnrollment >= 0;",
          "+    assert setEnrollment > 0;"
        ],
        "language": "java",
        "mutation": "CONDITIONAL_BOUNDARY",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -17,1 +17,1 @@",
          "-    assert setEnrollment >= 0;",
          "+    assert setEnrollment >= 1;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    assert setEnrollment >= 0;",
          "+    assert setEnrollment >= 1;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 6,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    assert setEnrollment >= 0;",
          "+    assert setEnrollment > 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 6,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -17,1 +17,0 @@",
          "-    assert setEnrollment >= 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_RUNTIME_CHECK",
        "testCount": 8,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -17,2 +17,1 @@",
          "-    assert setEnrollment >= 0;",
          "-    capacity = setEnrollment;",
          "+    return;"
        ],
        "language": "java",
        "mutation": "REMOVE_RUNTIME_CHECK",
        "testCount": 8,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -18,1 +18,0 @@",
          "-    capacity = setEnrollment;"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 12,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -22,1 +22,1 @@",
          "-    return name;",
          "+    return \"\";"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 22,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,0 @@",
          "-    capacity = setEnrollment;"
        ],
        "language": "java",
        "mutation": "REMOVE_RUNTIME_CHECK",
        "testCount": 30,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,0 @@",
          "-    assert setEnrollment >= 0;"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 39,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,0 @@",
          "-    assert setName != null;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 74,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withgettersandsetters/Classroom.java"
  },
  {
    "published": {
      "contentHash": "a4c371d9d36e6dd818a07d69d2faebb8-v2024.6.1",
      "path": "cougar-feliform",
      "author": "challen@illinois.edu",
      "version": "2021.7.0",
      "name": "Cougar Feliform",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.cougarfeliform",
      "klass": "Cougar",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Create and complete the implementation of the <code>Cougar</code> class.\nYour class should be public, not final and not abstract, inherit from the <code>Feliform</code> class,\nand provide the following methods:</p><ol><li>Constructor that takes a <code>int</code> parameter <code>speed</code> and a second <code>weight</code>.\nCreates a new <code>Cougar</code> with the passed speed and weight.\nYou should call the <code>Feliform</code> constructor and pass it the <code>String</code> &quot;cougar&quot; to identify the type\nof this feliform.</li><li>Public instance method <code>dangerousness</code> that takes no arguments and returns an <code>int</code>.\nReturn the dangerousness of this cougar which equals its speed times its weight.</li><li>Override <code>public boolean equals(Object other)</code>.\nReturn <code>true</code> if <code>other</code> is a <code>Cougar</code> with the same speed and weight, and <code>false</code> otherwise.\nNote that <code>other</code> may be <code>null</code> or not a <code>Housecat</code>.</li></ol><p>Finally, note that your class should not expose any of its internal state publicly.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 2,
            "ARITHMETIC_OPERATORS": 1,
            "COMPARISON_OPERATORS": 2,
            "LOGICAL_OPERATORS": 2,
            "IF_STATEMENTS": 1,
            "METHOD": 2,
            "RETURN": 3,
            "CONSTRUCTOR": 1,
            "INSTANCEOF": 1,
            "CLASS": 1,
            "EXTENDS": 1,
            "SUPER": 1,
            "REFERENCE_EQUALITY": 2,
            "CLASS_FIELD": 2,
            "VISIBILITY_MODIFIERS": 6,
            "FINAL_FIELD": 2,
            "DOT_NOTATION": 2,
            "DOTTED_VARIABLE_ACCESS": 2
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "EXTENDS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 37
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 3,
                "column": 10
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 5,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 5,
                "column": 45
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "SUPER",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 11,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 11,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 11,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 12,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 12,
                "column": 25
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 13,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 15,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 15,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 15,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 16,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 16,
                "column": 4
              }
            },
            {
              "feature": "LOGICAL_OPERATORS",
              "location": {
                "line": 16,
                "column": 8
              }
            },
            {
              "feature": "INSTANCEOF",
              "location": {
                "line": 16,
                "column": 10
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 16,
                "column": 41
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 16,
                "column": 41
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 17,
                "column": 6
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 17,
                "column": 6
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 17,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 19,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 19,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 19,
                "column": 11
              }
            },
            {
              "feature": "LOGICAL_OPERATORS",
              "location": {
                "line": 19,
                "column": 11
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 19,
                "column": 11
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 19,
                "column": 20
              }
            },
            {
              "feature": "DOTTED_VARIABLE_ACCESS",
              "location": {
                "line": 19,
                "column": 20
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 19,
                "column": 38
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 19,
                "column": 38
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 19,
                "column": 48
              }
            },
            {
              "feature": "DOTTED_VARIABLE_ACCESS",
              "location": {
                "line": 19,
                "column": 48
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 19,
                "column": 63
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 20,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 21,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "Feliform",
            "int",
            "boolean",
            "Object",
            "Cougar"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 18,
          "comment": 0,
          "blank": 4
        }
      },
      "complexity": {
        "java": 5
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "Feliform",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/cougarfeliform/Cougar.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/cougarfeliform/Feliform.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Cougar",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.Both;\nimport edu.illinois.cs.cs125.jenisol.core.Limit;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Create and complete the implementation of the `Cougar` class.\n * Your class should be public, not final and not abstract, inherit from the `Feliform` class,\n * and provide the following methods:\n *\n * 1. Constructor that takes a `int` parameter `speed` and a second `weight`.\n * Creates a new `Cougar` with the passed speed and weight.\n * You should call the `Feliform` constructor and pass it the `String` \"cougar\" to identify the type\n * of this feliform.\n * 1. Public instance method `dangerousness` that takes no arguments and returns an `int`.\n * Return the dangerousness of this cougar which equals its speed times its weight.\n * 1. Override `public boolean equals(Object other)`.\n * Return `true` if `other` is a `Cougar` with the same speed and weight, and `false` otherwise.\n * Note that `other` may be `null` or not a `Housecat`.\n *\n * Finally, note that your class should not expose any of its internal state publicly.\n */\n@Correct(name = \"Cougar Feliform\", version = \"2021.7.0\", author = \"challen@illinois.edu\")\npublic class Cougar extends Feliform {\n  private final int speed;\n  private final int weight;\n\n  public Cougar(int setSpeed, int setWeight) {\n    super(\"cougar\");\n    speed = setSpeed;\n    weight = setWeight;\n  }\n\n  @Override\n  public int dangerousness() {\n    return speed * weight;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof Cougar housecat)) {\n      return false;\n    }\n    return speed == housecat.speed && weight == housecat.weight;\n  }\n\n  @Both\n  @Limit(1)\n  public static String getType(Feliform feliform) {\n    return feliform.getType();\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/cougarfeliform/Cougar.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Cougar",
        "contents": "public class Cougar extends Feliform {\n  private final int speed;\n  private final int weight;\n\n  public Cougar(int setSpeed, int setWeight) {\n    super(\"cougar\");\n    speed = setSpeed;\n    weight = setWeight;\n  }\n\n  public int dangerousness() {\n    return speed * weight;\n  }\n\n  public boolean equals(Object o) {\n    if (!(o instanceof Cougar housecat)) {\n      return false;\n    }\n    return speed == housecat.speed && weight == housecat.weight;\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/cougarfeliform/Cougar.java",
        "complexity": 5,
        "features": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 2,
            "ARITHMETIC_OPERATORS": 1,
            "COMPARISON_OPERATORS": 2,
            "LOGICAL_OPERATORS": 2,
            "IF_STATEMENTS": 1,
            "METHOD": 2,
            "RETURN": 3,
            "CONSTRUCTOR": 1,
            "INSTANCEOF": 1,
            "CLASS": 1,
            "EXTENDS": 1,
            "SUPER": 1,
            "REFERENCE_EQUALITY": 2,
            "CLASS_FIELD": 2,
            "VISIBILITY_MODIFIERS": 6,
            "FINAL_FIELD": 2,
            "DOT_NOTATION": 2,
            "DOTTED_VARIABLE_ACCESS": 2
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "EXTENDS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 37
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 3,
                "column": 10
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 5,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 5,
                "column": 45
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "SUPER",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 11,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 11,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 11,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 12,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 12,
                "column": 25
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 13,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 15,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 15,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 15,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 16,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 16,
                "column": 4
              }
            },
            {
              "feature": "LOGICAL_OPERATORS",
              "location": {
                "line": 16,
                "column": 8
              }
            },
            {
              "feature": "INSTANCEOF",
              "location": {
                "line": 16,
                "column": 10
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 16,
                "column": 41
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 16,
                "column": 41
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 17,
                "column": 6
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 17,
                "column": 6
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 17,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 18,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 19,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 19,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 19,
                "column": 11
              }
            },
            {
              "feature": "LOGICAL_OPERATORS",
              "location": {
                "line": 19,
                "column": 11
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 19,
                "column": 11
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 19,
                "column": 20
              }
            },
            {
              "feature": "DOTTED_VARIABLE_ACCESS",
              "location": {
                "line": 19,
                "column": 20
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 19,
                "column": 38
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 19,
                "column": 38
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 19,
                "column": 48
              }
            },
            {
              "feature": "DOTTED_VARIABLE_ACCESS",
              "location": {
                "line": 19,
                "column": 48
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 19,
                "column": 63
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 20,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 21,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "Feliform",
            "int",
            "boolean",
            "Object",
            "Cougar"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 18,
          "comment": 0,
          "blank": 4
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [],
    "commonFiles": [
      {
        "klass": "Feliform",
        "contents": "public abstract class Feliform {\n  private final String type;\n\n  public Feliform(String setType) {\n    type = setType;\n  }\n\n  public String getType() {\n    return type;\n  }\n\n  public abstract int dangerousness();\n}\n",
        "language": "java"
      }
    ],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 117,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "Cougar",
        "Feliform",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 10800
      },
      "allocationLimit": {
        "java": 5632
      },
      "solutionClassSize": {
        "java": 415
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 936,
      "executionCountLimit": {
        "java": 1872,
        "kotlin": 1872
      },
      "allocationLimit": {
        "java": 6528,
        "kotlin": 6528
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 117,
      "mutationCount": 28,
      "solutionMaxRuntime": 19,
      "bootstrapLength": 2740,
      "mutationLength": 163,
      "incorrectLength": 1581,
      "calibrationLength": 37,
      "solutionCoverage": {
        "covered": 8,
        "total": 8,
        "missed": 0
      },
      "executionCounts": {
        "java": 675
      },
      "memoryAllocation": {
        "java": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 347.588
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    super(\"cougar\");",
          "+    super(\"c0ugar\");"
        ],
        "language": "java",
        "mutation": "SWAP_AND_OR",
        "testCount": 18,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    super(\"cougar\");",
          "+    super(\"coigar\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 18,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    super(\"cougar\");",
          "+    super(\"coTgar\");"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 18,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    super(\"cougar\");",
          "+    super(\"Cougar\");"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 18,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    super(\"cougar\");",
          "+    super(\"co7gar\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 18,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    super(\"cougar\");",
          "+    super(\"coCgar\");"
        ],
        "language": "java",
        "mutation": "REMOVE_AND_OR",
        "testCount": 18,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    super(\"cougar\");",
          "+    super(\"ougar\");"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 18,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    super(\"cougar\");",
          "+    super(\"couga\");"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 18,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -19,1 +19,1 @@",
          "-    return speed == housecat.speed && weight == housecat.weight;",
          "+    return true;"
        ],
        "language": "java",
        "mutation": "CHANGE_EQUALS",
        "testCount": 19,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -12,1 +12,1 @@",
          "-    return speed * weight;",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_IF",
        "testCount": 20,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -12,1 +12,1 @@",
          "-    return speed * weight;",
          "+    return weight;"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 20,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -17,1 +17,1 @@",
          "-      return false;",
          "+      return true;"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 21,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -19,1 +19,1 @@",
          "-    return speed == housecat.speed && weight == housecat.weight;",
          "+    return speed == housecat.speed || weight == housecat.weight;"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 27,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -19,1 +19,1 @@",
          "-    return speed == housecat.speed && weight == housecat.weight;",
          "+    return speed == housecat.speed && weight != housecat.weight;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 27,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -19,1 +19,1 @@",
          "-    return speed == housecat.speed && weight == housecat.weight;",
          "+    return speed == housecat.speed;"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 27,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -19,1 +19,1 @@",
          "-    return speed == housecat.speed && weight == housecat.weight;",
          "+    return false;"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_LOOKALIKE",
        "testCount": 30,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -19,1 +19,1 @@",
          "-    return speed == housecat.speed && weight == housecat.weight;",
          "+    return speed != housecat.speed && weight == housecat.weight;"
        ],
        "language": "java",
        "mutation": "TRUE_RETURN",
        "testCount": 30,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -16,4 +16,1 @@",
          "-    if (!(o instanceof Cougar housecat)) {",
          "-      return false;",
          "-    }",
          "-    return speed == housecat.speed && weight == housecat.weight;",
          "+    return false;"
        ],
        "language": "java",
        "mutation": "NEGATE_IF",
        "testCount": 30,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -19,1 +19,1 @@",
          "-    return speed == housecat.speed && weight == housecat.weight;",
          "+    return weight == housecat.weight;"
        ],
        "language": "java",
        "mutation": "CHANGE_EQUALS",
        "testCount": 34,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -12,1 +12,1 @@",
          "-    return speed * weight;",
          "+    return speed;"
        ],
        "language": "java",
        "mutation": "MATH",
        "testCount": 116,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -12,1 +12,1 @@",
          "-    return speed * weight;",
          "+    return speed / weight;"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 116,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/cougarfeliform/Cougar.java"
  },
  {
    "published": {
      "contentHash": "f4e3e9056d1f6093687b994d7b59953b-v2024.6.1",
      "path": "equals-88",
      "author": "challen@illinois.edu",
      "version": "2021.6.0",
      "name": "Equals 88",
      "type": "METHOD",
      "packageName": "com.github.cs124_illinois.questioner.testing.equals88",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Write a method named <code>equals88</code> that returns <code>true</code> if its <code>int</code> argument is equal to 88,\nour magic number.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "COMPARISON_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "REFERENCE_EQUALITY": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 28
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "boolean",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 1
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "java.lang.Integer",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/equals88/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FixedParameters;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n/*\n * Write a method named `equals88` that returns `true` if its `int` argument is equal to 88,\n * our magic number.\n */\n\n@Correct(name = \"Equals 88\", author = \"challen@illinois.edu\", version = \"2021.6.0\")\n@Wrap\npublic class Question {\n  boolean equals88(int value) {\n    return value == 88;\n  }\n\n  @FixedParameters private static final List<Integer> FIXED = Arrays.asList(88, 188, 888, 8);\n\n  @RandomParameters\n  private static int randomInts(Random random) {\n    if (random.nextBoolean()) {\n      return 88;\n    } else {\n      return random.nextInt();\n    }\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/equals88/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "boolean equals88(int value) {\n  return value == 88;\n}",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/equals88/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "COMPARISON_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "REFERENCE_EQUALITY": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 28
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "boolean",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [],
    "commonFiles": [],
    "templateByLanguage": {
      "java": "public class Question {\n  {{{ contents }}}\n}"
    },
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Integer",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 3072
      },
      "allocationLimit": {
        "java": 5632
      },
      "solutionClassSize": {
        "java": 141
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 6,
      "mutationCount": 7,
      "solutionMaxRuntime": 16,
      "bootstrapLength": 2927,
      "mutationLength": 18,
      "incorrectLength": 344,
      "calibrationLength": 24,
      "solutionCoverage": {
        "covered": 1,
        "total": 1,
        "missed": 0
      },
      "executionCounts": {
        "java": 192
      },
      "memoryAllocation": {
        "java": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 350.491
    },
    "fauxStatic": true,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value == 88;",
          "+  return false;"
        ],
        "language": "java",
        "mutation": "CHANGE_EQUALS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value == 88;",
          "+  return value != 88;"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value == 88;",
          "+  return value == 8;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL_TRIM",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value == 88;",
          "+  return value == 89;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value == 88;",
          "+  return value == 98;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value == 88;",
          "+  return true;"
        ],
        "language": "java",
        "mutation": "TRUE_RETURN",
        "testCount": 1,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/equals88/Question.java"
  },
  {
    "published": {
      "contentHash": "bf70754a624fcd0a3d682d5f2d7b3c2a-v2024.6.1",
      "path": "input-interleaving-test",
      "author": "challen@illinois.edu",
      "version": "2022.9.0",
      "name": "Input Interleaving Test",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.inputinterleavingtest",
      "klass": "Question",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Testing STDIN generation and interleaving.</p>",
        "kotlin": "<p>Testing STDIN generation and interleaving. In Kotlin!</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 3,
            "VARIABLE_ASSIGNMENTS": 3,
            "ARITHMETIC_OPERATORS": 2,
            "METHOD": 1,
            "STRING": 2,
            "CLASS": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "IMPORT": 1,
            "PRINT_STATEMENTS": 3,
            "DOT_NOTATION": 3,
            "DOTTED_METHOD_CALL": 2,
            "DOTTED_VARIABLE_ACCESS": 1
          },
          "featureList": [
            {
              "feature": "IMPORT",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 3,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 4,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 28
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 32
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 6,
                "column": 12
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 6,
                "column": 12
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 6,
                "column": 22
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 6,
                "column": 34
              }
            },
            {
              "feature": "DOTTED_VARIABLE_ACCESS",
              "location": {
                "line": 6,
                "column": 34
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 7,
                "column": 19
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 7,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 8,
                "column": 23
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 41
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 9,
                "column": 11
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 9,
                "column": 11
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 9,
                "column": 20
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 9,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 10,
                "column": 23
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 10,
                "column": 43
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 12,
                "column": 0
              }
            }
          ],
          "importList": [
            "java.util.Scanner"
          ],
          "typeList": [
            "Scanner",
            "String"
          ],
          "identifierList": [
            "scanner",
            "first",
            "second"
          ],
          "dottedMethodList": [
            "println",
            "nextLine"
          ]
        },
        "kotlin": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 3,
            "VARIABLE_ASSIGNMENTS": 3,
            "FINAL_VARIABLE": 3,
            "METHOD": 1,
            "STRING": 3,
            "TYPE_INFERENCE": 3,
            "IMPORT": 1,
            "PRINT_STATEMENTS": 3,
            "DOT_NOTATION": 3,
            "DOTTED_METHOD_CALL": 2,
            "DOTTED_VARIABLE_ACCESS": 1
          },
          "featureList": [
            {
              "feature": "IMPORT",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 3,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 18
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 5,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 5,
                "column": 6
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 5,
                "column": 30
              }
            },
            {
              "feature": "DOTTED_VARIABLE_ACCESS",
              "location": {
                "line": 5,
                "column": 30
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 35
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 6,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 6,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 6,
                "column": 6
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 6,
                "column": 21
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 6,
                "column": 30
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 25
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 8,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 8,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 8,
                "column": 6
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 8,
                "column": 22
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 8,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 32
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 9,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 27
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [
            "java.util.Scanner"
          ],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "nextLine"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 11,
          "comment": 0,
          "blank": 2
        },
        "kotlin": {
          "source": 9,
          "comment": 0,
          "blank": 1
        }
      },
      "complexity": {
        "java": 1,
        "kotlin": 1
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.io.PrintStream",
          "java.lang.System",
          "java.util.Scanner",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "java.io.PrintStream",
          "java.lang.System",
          "java.util.Scanner",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/inputinterleavingtest/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/inputinterleavingtest/correct/kotlin/Question.kt"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.EdgeType;\nimport edu.illinois.cs.cs125.jenisol.core.Limit;\nimport edu.illinois.cs.cs125.jenisol.core.ProvideSystemIn;\nimport edu.illinois.cs.cs125.jenisol.core.RandomType;\nimport edu.illinois.cs.cs125.jenisol.core.SimpleType;\nimport edu.illinois.cs.cs125.jenisol.core.generators.SystemIn;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport java.util.Arrays;\nimport java.util.Random;\nimport java.util.Scanner;\n\n/*\n * Testing STDIN generation and interleaving.\n */\n\n@SuppressWarnings(\"StringOperationCanBeSimplified\")\n@Correct(name = \"Input Interleaving Test\", version = \"2022.9.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  @ProvideSystemIn\n  @Limit(1)\n  public static void echo() {\n    System.out.println(\"Hello!\");\n    Scanner scanner = new Scanner(System.in);\n    String first = scanner.nextLine();\n    System.out.println(\"First: \" + first);\n    String second = scanner.nextLine();\n    System.out.println(\"Second: \" + second);\n  }\n\n  @SimpleType\n  private static final SystemIn[] SIMPLE =\n      new SystemIn[] {new SystemIn(Arrays.asList(\"Test\", \"Me\"))};\n\n  @EdgeType private static final SystemIn[] EDGE = new SystemIn[] {};\n\n  @RandomType\n  private static SystemIn randomInput(Random random) {\n    return new SystemIn(\n        Arrays.asList(new String(\"\" + random.nextInt()), new String(\"\" + random.nextInt())));\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/inputinterleavingtest/Question.java",
      "suppressions": [
        "StringOperationCanBeSimplified"
      ]
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "import java.util.Scanner;\n\npublic class Question {\n  public static void echo() {\n    System.out.println(\"Hello!\");\n    Scanner scanner = new Scanner(System.in);\n    String first = scanner.nextLine();\n    System.out.println(\"First: \" + first);\n    String second = scanner.nextLine();\n    System.out.println(\"Second: \" + second);\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/inputinterleavingtest/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 3,
            "VARIABLE_ASSIGNMENTS": 3,
            "ARITHMETIC_OPERATORS": 2,
            "METHOD": 1,
            "STRING": 2,
            "CLASS": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "IMPORT": 1,
            "PRINT_STATEMENTS": 3,
            "DOT_NOTATION": 3,
            "DOTTED_METHOD_CALL": 2,
            "DOTTED_VARIABLE_ACCESS": 1
          },
          "featureList": [
            {
              "feature": "IMPORT",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 3,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 4,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 28
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 32
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 6,
                "column": 12
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 6,
                "column": 12
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 6,
                "column": 22
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 6,
                "column": 34
              }
            },
            {
              "feature": "DOTTED_VARIABLE_ACCESS",
              "location": {
                "line": 6,
                "column": 34
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 7,
                "column": 19
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 7,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 8,
                "column": 23
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 41
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 9,
                "column": 11
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 9,
                "column": 11
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 9,
                "column": 20
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 9,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 10,
                "column": 23
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 10,
                "column": 43
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 12,
                "column": 0
              }
            }
          ],
          "importList": [
            "java.util.Scanner"
          ],
          "typeList": [
            "Scanner",
            "String"
          ],
          "identifierList": [
            "scanner",
            "first",
            "second"
          ],
          "dottedMethodList": [
            "println",
            "nextLine"
          ]
        },
        "lineCount": {
          "source": 11,
          "comment": 0,
          "blank": 2
        },
        "expectedDeadCount": 0,
        "suppressions": [
          "StringOperationCanBeSimplified"
        ]
      },
      "kotlin": {
        "klass": "QuestionKt",
        "contents": "import java.util.Scanner\n\nfun echo() {\n  println(\"Hello!\")\n  val scanner = Scanner(System.`in`)\n  val first = scanner.nextLine()\n  println(\"First: $first\")\n  val second = scanner.nextLine()\n  println(\"Second: $second\")\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/inputinterleavingtest/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 3,
            "VARIABLE_ASSIGNMENTS": 3,
            "FINAL_VARIABLE": 3,
            "METHOD": 1,
            "STRING": 3,
            "TYPE_INFERENCE": 3,
            "IMPORT": 1,
            "PRINT_STATEMENTS": 3,
            "DOT_NOTATION": 3,
            "DOTTED_METHOD_CALL": 2,
            "DOTTED_VARIABLE_ACCESS": 1
          },
          "featureList": [
            {
              "feature": "IMPORT",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 3,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 18
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 5,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 5,
                "column": 6
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 5,
                "column": 30
              }
            },
            {
              "feature": "DOTTED_VARIABLE_ACCESS",
              "location": {
                "line": 5,
                "column": 30
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 35
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 6,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 6,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 6,
                "column": 6
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 6,
                "column": 21
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 6,
                "column": 30
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 25
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 8,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 8,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 8,
                "column": 6
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 8,
                "column": 22
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 8,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 32
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 9,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 27
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [
            "java.util.Scanner"
          ],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "nextLine"
          ]
        },
        "lineCount": {
          "source": 9,
          "comment": 0,
          "blank": 1
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "QuestionKt",
        "contents": "import java.util.Scanner\n\nfun echo() {\n  println(\"Hello!\")\n  val scanner = Scanner(System.`in`)\n  val first = scanner.nextLine()\n  println(\"First: $first\")\n  val second = scanner.nextLine()\n  println(\"Second: $second\")\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/inputinterleavingtest/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 3,
            "VARIABLE_ASSIGNMENTS": 3,
            "FINAL_VARIABLE": 3,
            "METHOD": 1,
            "STRING": 3,
            "TYPE_INFERENCE": 3,
            "IMPORT": 1,
            "PRINT_STATEMENTS": 3,
            "DOT_NOTATION": 3,
            "DOTTED_METHOD_CALL": 2,
            "DOTTED_VARIABLE_ACCESS": 1
          },
          "featureList": [
            {
              "feature": "IMPORT",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 3,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 18
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 5,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 5,
                "column": 6
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 5,
                "column": 30
              }
            },
            {
              "feature": "DOTTED_VARIABLE_ACCESS",
              "location": {
                "line": 5,
                "column": 30
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 35
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 6,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 6,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 6,
                "column": 6
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 6,
                "column": 21
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 6,
                "column": 30
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 25
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 8,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 8,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 8,
                "column": 6
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 8,
                "column": 22
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 8,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 32
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 9,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 27
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [
            "java.util.Scanner"
          ],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "nextLine"
          ]
        },
        "lineCount": {
          "source": 9,
          "comment": 0,
          "blank": 1
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 1,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.System",
        "java.util.Scanner",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.invoke.StringConcatFactory",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "java.lang.System",
        "java.util.Scanner",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "java.lang.Object",
        "java.lang.Class",
        "QuestionKt",
        "java.lang.String",
        "java.lang.invoke.StringConcatFactory",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 336,
        "kotlin": 336
      },
      "allocationLimit": {
        "java": 886528,
        "kotlin": 884736
      },
      "solutionClassSize": {
        "java": 897,
        "kotlin": 872
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [
        "StringOperationCanBeSimplified"
      ],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 8,
      "executionCountLimit": {
        "java": 16,
        "kotlin": 16
      },
      "allocationLimit": {
        "java": 887808,
        "kotlin": 887808
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 1,
      "mutationCount": 35,
      "solutionMaxRuntime": 7,
      "bootstrapLength": 6225,
      "mutationLength": 224,
      "incorrectLength": 1821,
      "calibrationLength": 187,
      "solutionCoverage": {
        "covered": 8,
        "total": 8,
        "missed": 0
      },
      "executionCounts": {
        "java": 21,
        "kotlin": 21
      },
      "memoryAllocation": {
        "java": 55408,
        "kotlin": 55296
      },
      "canTestTest": false,
      "javaSolutionBootstrapCPUTimeMS": 6.643
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"Hello?\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_LOOKALIKE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"HeTlo!\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(\"3econd: \" + second);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"Hel1o!\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(second);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    System.out.println(\"First: \" + first);",
          "+    System.out.println(\"FirWt: \" + first);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(\"Sec0nd: \" + second);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_LOOKALIKE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    System.out.println(\"First: \" + first);",
          "+    System.out.println(\"First; \" + first);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_LOOKALIKE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(\"Second; \" + second);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_LOOKALIKE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    System.out.println(\"First: \" + first);",
          "+    System.out.println(\"first: \" + first);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(\"Segond: \" + second);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,0 @@",
          "-    System.out.println(\"Hello!\");"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    System.out.println(\"First: \" + first);",
          "+    System.out.println(\"First:L\" + first);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"HeClo!\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(\"second: \" + second);"
        ],
        "language": "java",
        "mutation": "PLUS_TO_MINUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,6 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "-    Scanner scanner = new Scanner(System.in);",
          "-    String first = scanner.nextLine();",
          "-    System.out.println(\"First: \" + first);",
          "-    String second = scanner.nextLine();",
          "-    System.out.println(\"Second: \" + second);",
          "+    return;"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"He1lo!\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_LOOKALIKE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(\"econd: \" + second);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    System.out.println(\"First: \" + first);",
          "+    System.out.println(\"cirst: \" + first);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"Heilo!\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_LOOKALIKE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    System.out.println(\"First: \" + first);",
          "+    System.out.println(first);"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,0 @@",
          "-    System.out.println(\"Second: \" + second);"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    System.out.println(\"First: \" + first);",
          "+    System.out.println(\"FUrst: \" + first);"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(\"Second: \");"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    System.out.println(\"First: \" + first);",
          "+    System.out.println(\"First: \");"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(\"Secone: \" + second);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"ello!\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"He7lo!\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"hello!\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    System.out.println(\"First: \" + first);",
          "+    System.out.println(\"irst: \" + first);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    System.out.println(\"Hello!\");",
          "+    System.out.println(\"Hello\");"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,0 @@",
          "-    System.out.println(\"First: \" + first);"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    System.out.println(\"Second: \" + second);",
          "+    System.out.println(\"Secondq \" + second);"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 0,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/inputinterleavingtest/Question.java"
  },
  {
    "published": {
      "contentHash": "a99bf381d8f7b41afb3261dbc6c03dbc-v2024.6.1",
      "path": "kotlin-faux-property-testing",
      "author": "challen@illinois.edu",
      "version": "2023.7.0",
      "name": "Kotlin Faux Property Testing",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.withkotlinfauxproperty",
      "klass": "Book",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Question to test detection of Kotlin faux properties in Jenisol 2023.7.0.</p>",
        "kotlin": "<p>Question to test detection of Kotlin faux properties in Jenisol 2023.7.0.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 1,
            "METHOD": 2,
            "RETURN": 1,
            "GETTER": 1,
            "SETTER": 1,
            "STRING": 3,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 4
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 18
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "SETTER",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 38
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 8,
                "column": 26
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 15
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "STRING": 1,
            "NULL": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "NULLABLE_TYPE": 1,
            "EXPLICIT_TYPE": 1
          },
          "featureList": [
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 11
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "NULLABLE_TYPE",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "EXPLICIT_TYPE",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "NULL",
              "location": {
                "line": 2,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 3,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 9,
          "comment": 0,
          "blank": 3
        },
        "kotlin": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 2,
        "kotlin": 0
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "java.lang.Integer",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withkotlinfauxproperty/Book.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withkotlinfauxproperty/correct/kotlin/Book.kt",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withkotlinfauxproperty/incorrect/withfauxproperty/Book.kt"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Book",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Question to test detection of Kotlin faux properties in Jenisol 2023.7.0.\n */\n@Correct(\n    name = \"Kotlin Faux Property Testing\",\n    version = \"2023.7.0\",\n    author = \"challen@illinois.edu\")\npublic class Book {\n  private String name;\n\n  public void setName(String setName) {\n    name = setName;\n  }\n\n  public String getName() {\n    return name;\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withkotlinfauxproperty/Book.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Book",
        "contents": "public class Book {\n  private String name;\n\n  public void setName(String setName) {\n    name = setName;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withkotlinfauxproperty/Book.java",
        "complexity": 2,
        "features": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 1,
            "METHOD": 2,
            "RETURN": 1,
            "GETTER": 1,
            "SETTER": 1,
            "STRING": 3,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 4
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 18
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "SETTER",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 38
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 8,
                "column": 26
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 15
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 9,
          "comment": 0,
          "blank": 3
        },
        "expectedDeadCount": 0,
        "suppressions": []
      },
      "kotlin": {
        "klass": "Book",
        "contents": "class Book {\n  var name: String? = null\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withkotlinfauxproperty/correct/kotlin/Book.kt",
        "complexity": 0,
        "features": {
          "featureMap": {
            "STRING": 1,
            "NULL": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "NULLABLE_TYPE": 1,
            "EXPLICIT_TYPE": 1
          },
          "featureList": [
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 11
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "NULLABLE_TYPE",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "EXPLICIT_TYPE",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "NULL",
              "location": {
                "line": 2,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 3,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "Book",
        "contents": "class Book {\n  var name: String? = null\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withkotlinfauxproperty/correct/kotlin/Book.kt",
        "complexity": 0,
        "features": {
          "featureMap": {
            "STRING": 1,
            "NULL": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "NULLABLE_TYPE": 1,
            "EXPLICIT_TYPE": 1
          },
          "featureList": [
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 11
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "NULLABLE_TYPE",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "EXPLICIT_TYPE",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "NULL",
              "location": {
                "line": 2,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 3,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [
      {
        "klass": "Book",
        "contents": "class Book {\n  private var name: String? = null\n  fun getName(): String? = name\n  fun setName(setName: String?) {\n    name = setName\n  }\n}",
        "reason": "DESIGN",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withkotlinfauxproperty/incorrect/withfauxproperty/Book.kt",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      }
    ],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Book",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Integer",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Book",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 4944,
        "kotlin": 3072
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      },
      "solutionClassSize": {
        "java": 234,
        "kotlin": 578
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 6016,
        "kotlin": 6016
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 21,
      "mutationCount": 4,
      "solutionMaxRuntime": 19,
      "bootstrapLength": 6518,
      "mutationLength": 10,
      "incorrectLength": 731,
      "calibrationLength": 89,
      "solutionCoverage": {
        "covered": 4,
        "total": 4,
        "missed": 0
      },
      "executionCounts": {
        "java": 309,
        "kotlin": 192
      },
      "memoryAllocation": {
        "java": 352,
        "kotlin": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 479.452
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return name;",
          "+    return \"\";"
        ],
        "language": "java",
        "incorrectIndex": 0,
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    name = setName;",
          "+    return;"
        ],
        "language": "java",
        "mutation": "NULL_RETURN",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return name;",
          "+    return null;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,3 +4,1 @@",
          "-  public void setName(String setName) {",
          "-    name = setName;",
          "-  }",
          "+  public void setName(String setName) {}"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 2,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withkotlinfauxproperty/Book.java"
  },
  {
    "published": {
      "contentHash": "67850bb6b73a3a28de10c685bb17626b-v2024.6.1",
      "path": "private-recursive-helper",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "name": "Private Recursive Helper",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.privaterecursivehelper",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Testing question for recursion checks on private methods.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 2,
            "IF_STATEMENTS": 2,
            "METHOD": 2,
            "RETURN": 3,
            "CLASS": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "REFERENCE_EQUALITY": 1,
            "VISIBILITY_MODIFIERS": 3,
            "STATIC_METHOD": 2
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 17
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 47
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 14
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 11
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 44
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 9,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 9,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 9,
                "column": 40
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 10,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 10,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 11,
                "column": 6
              }
            },
            {
              "feature": "THROW",
              "location": {
                "line": 11,
                "column": 6
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 11,
                "column": 12
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 11,
                "column": 42
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 13,
                "column": 32
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 14,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 15,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 14,
          "comment": 0,
          "blank": 2
        }
      },
      "complexity": {
        "java": 5
      },
      "recursiveMethodsByLanguage": {
        "java": [
          {
            "className": "Question",
            "methodName": "rangeSum",
            "descriptor": "(I)I"
          }
        ]
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Throwable",
          "java.lang.IllegalArgumentException",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/privaterecursivehelper/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/privaterecursivehelper/incorrect/java/iterative/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FilterParameters;\nimport edu.illinois.cs.cs125.jenisol.core.SkipTest;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Testing question for recursion checks on private methods.\n */\n\n@Correct(name = \"Private Recursive Helper\", version = \"2022.7.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  private static int rangeSumHelper(int range) {\n    if (range == 0) {\n      return 0;\n    }\n    return range + rangeSumHelper(range - 1);\n  }\n\n  @FilterParameters\n  private static void filterRangeSum(int range) {\n    if (range > 1024) {\n      throw new SkipTest();\n    }\n  }\n\n  public static int rangeSum(int range) {\n    if (range < 0) {\n      throw new IllegalArgumentException();\n    }\n    return rangeSumHelper(range);\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/privaterecursivehelper/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "public class Question {\n  private static int rangeSumHelper(int range) {\n    if (range == 0) {\n      return 0;\n    }\n    return range + rangeSumHelper(range - 1);\n  }\n\n  public static int rangeSum(int range) {\n    if (range < 0) {\n      throw new IllegalArgumentException();\n    }\n    return rangeSumHelper(range);\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/privaterecursivehelper/Question.java",
        "complexity": 5,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 2,
            "IF_STATEMENTS": 2,
            "METHOD": 2,
            "RETURN": 3,
            "CLASS": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "REFERENCE_EQUALITY": 1,
            "VISIBILITY_MODIFIERS": 3,
            "STATIC_METHOD": 2
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 17
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 47
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 14
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 11
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 44
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 9,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 9,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 9,
                "column": 40
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 10,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 10,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 10,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 11,
                "column": 6
              }
            },
            {
              "feature": "THROW",
              "location": {
                "line": 11,
                "column": 6
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 11,
                "column": 12
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 11,
                "column": 42
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 12,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 13,
                "column": 32
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 14,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 15,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 14,
          "comment": 0,
          "blank": 2
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [
      {
        "klass": "Question",
        "contents": "public class Question {\n  private static int rangeSumHelper(int range) {\n    int sum = 0;\n    for (int i = 0; i <= range; i++) {\n      sum += i;\n    }\n    return sum;\n  }\n\n  public static int rangeSum(int range) {\n    if (range < 0) {\n      throw new IllegalArgumentException();\n    }\n    return rangeSumHelper(range);\n  }\n}\n",
        "reason": "RECURSION",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/privaterecursivehelper/incorrect/java/iterative/Question.java",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      }
    ],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Throwable",
        "java.lang.IllegalArgumentException",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 26688
      },
      "allocationLimit": {
        "java": 5103232
      },
      "solutionClassSize": {
        "java": 305
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [
          {
            "className": "Question",
            "methodName": "rangeSum",
            "descriptor": "(I)I"
          }
        ]
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 88047232,
        "kotlin": 88047232
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 11,
      "mutationCount": 23,
      "solutionMaxRuntime": 7,
      "bootstrapLength": 2400,
      "mutationLength": 255,
      "incorrectLength": 2065,
      "calibrationLength": 18,
      "solutionCoverage": {
        "covered": 7,
        "total": 7,
        "missed": 0
      },
      "executionCounts": {
        "java": 1668
      },
      "memoryAllocation": {
        "java": 318952
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 526.719
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,3 +10,0 @@",
          "-    if (range < 0) {",
          "-      throw new IllegalArgumentException();",
          "-    }"
        ],
        "language": "java",
        "mutation": "PRIMITIVE_RETURN",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,4 +10,1 @@",
          "-    if (range < 0) {",
          "-      throw new IllegalArgumentException();",
          "-    }",
          "-    return rangeSumHelper(range);",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    if (range < 0) {",
          "+    if (!(range < 0)) {"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    if (range < 0) {",
          "+    if (range >= 0) {"
        ],
        "language": "java",
        "mutation": "PLUS_TO_MINUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-      return 0;",
          "+      return 1;"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    return range + rangeSumHelper(range - 1);",
          "+    return rangeSumHelper(range - 1);"
        ],
        "language": "java",
        "mutation": "REMOVE_IF",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -13,1 +13,1 @@",
          "-    return rangeSumHelper(range);",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "CHANGE_EQUALS",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    return range + rangeSumHelper(range - 1);",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,4 +3,1 @@",
          "-    if (range == 0) {",
          "-      return 0;",
          "-    }",
          "-    return range + rangeSumHelper(range - 1);",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (range == 0) {",
          "+    if (range == 1) {"
        ],
        "language": "java",
        "mutation": "NEGATE_IF",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (range == 0) {",
          "+    if (!(range == 0)) {"
        ],
        "language": "java",
        "mutation": "NEGATE_IF",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (range == 0) {",
          "+    if (range != 0) {"
        ],
        "language": "java",
        "incorrectIndex": 0,
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    if (range < 0) {",
          "+    if (range <= 0) {"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -10,1 +10,1 @@",
          "-    if (range < 0) {",
          "+    if (range < 1) {"
        ],
        "language": "java",
        "mutation": "CONDITIONAL_BOUNDARY",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    return range + rangeSumHelper(range - 1);",
          "+    return range - rangeSumHelper(range - 1);"
        ],
        "language": "java",
        "mutation": "PLUS_OR_MINUS_ONE_TO_ZERO",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    return range + rangeSumHelper(range - 1);",
          "+    return range;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 4,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/privaterecursivehelper/Question.java"
  },
  {
    "published": {
      "contentHash": "218e2ccf7e9cf8ca63dc5966ef403834-v2024.6.1",
      "path": "read-hello-world",
      "author": "challen@illinois.edu",
      "version": "2023.11.0",
      "name": "Read Hello World!",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.readhelloworld",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Question to test filesystem generation.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 1,
            "VARIABLE_ASSIGNMENTS": 1,
            "METHOD": 1,
            "STRING": 1,
            "CLASS": 1,
            "THROWS": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "IMPORT": 2,
            "PRINT_STATEMENTS": 1,
            "DOT_NOTATION": 2,
            "DOTTED_METHOD_CALL": 2
          },
          "featureList": [
            {
              "feature": "IMPORT",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "IMPORT",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 5,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 5,
                "column": 16
              }
            },
            {
              "feature": "THROWS",
              "location": {
                "line": 5,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 5,
                "column": 47
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 31
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [
            "java.io.IOException",
            "java.util.Scanner"
          ],
          "typeList": [
            "String"
          ],
          "identifierList": [
            "greeter"
          ],
          "dottedMethodList": [
            "next",
            "useDelimiter",
            "println"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 8,
          "comment": 1,
          "blank": 2
        }
      },
      "complexity": {
        "java": 2
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.io.PrintStream",
          "java.lang.System",
          "java.util.Scanner",
          "java.io.IOException",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/readhelloworld/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.EdgeType;\nimport edu.illinois.cs.cs125.jenisol.core.ProvideFileSystem;\nimport edu.illinois.cs.cs125.jenisol.core.RandomType;\nimport edu.illinois.cs.cs125.jenisol.core.SimpleType;\nimport edu.illinois.cs.cs125.jenisol.core.generators.JenisolFileSystem;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Scanner;\n\n/*\n * Question to test filesystem generation.\n */\n\n@Correct(name = \"Read Hello World!\", version = \"2023.11.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  @ProvideFileSystem\n  public static void test() throws IOException {\n    // mutate-disable-string-literal-trim mutate-disable-string-literal\n    String greeter = new Scanner(\"testing.txt\").useDelimiter(\"\\\\A\").next();\n    System.out.println(greeter);\n  }\n\n  @SimpleType\n  private static final JenisolFileSystem[] SIMPLE =\n      new JenisolFileSystem[] {\n        new JenisolFileSystem(\n            Map.of(\"testing.txt\", \"Hello, world!\".getBytes(StandardCharsets.UTF_8)))\n      };\n\n  @EdgeType private static final JenisolFileSystem[] EDGE = new JenisolFileSystem[] {};\n\n  @RandomType\n  private static JenisolFileSystem randomInput(Random random) {\n    return new JenisolFileSystem(\n        Map.of(\"testing.txt\", (\"\" + random.nextInt()).getBytes(StandardCharsets.UTF_8)));\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/readhelloworld/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "import java.io.IOException;\nimport java.util.Scanner;\n\npublic class Question {\n  public static void test() throws IOException {\n    // mutate-disable-string-literal-trim mutate-disable-string-literal\n    String greeter = new Scanner(\"testing.txt\").useDelimiter(\"\\\\A\").next();\n    System.out.println(greeter);\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/readhelloworld/Question.java",
        "complexity": 2,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 1,
            "VARIABLE_ASSIGNMENTS": 1,
            "METHOD": 1,
            "STRING": 1,
            "CLASS": 1,
            "THROWS": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "IMPORT": 2,
            "PRINT_STATEMENTS": 1,
            "DOT_NOTATION": 2,
            "DOTTED_METHOD_CALL": 2
          },
          "featureList": [
            {
              "feature": "IMPORT",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "IMPORT",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 5,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 5,
                "column": 16
              }
            },
            {
              "feature": "THROWS",
              "location": {
                "line": 5,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 5,
                "column": 47
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 4
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 7,
                "column": 11
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 7,
                "column": 21
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "PRINT_STATEMENTS",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 31
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [
            "java.io.IOException",
            "java.util.Scanner"
          ],
          "typeList": [
            "String"
          ],
          "identifierList": [
            "greeter"
          ],
          "dottedMethodList": [
            "next",
            "useDelimiter",
            "println"
          ]
        },
        "lineCount": {
          "source": 8,
          "comment": 1,
          "blank": 2
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.System",
        "java.util.Scanner",
        "java.io.IOException",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "java.lang.Object",
        "Question",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 9216
      },
      "allocationLimit": {
        "java": 24732416
      },
      "solutionClassSize": {
        "java": 431
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 395584256,
        "kotlin": 395584256
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 1,
      "mutationCount": 4,
      "solutionMaxRuntime": 24,
      "bootstrapLength": 3849,
      "mutationLength": 13,
      "incorrectLength": 156,
      "calibrationLength": 41,
      "solutionCoverage": {
        "covered": 4,
        "total": 4,
        "missed": 0
      },
      "executionCounts": {
        "java": 576
      },
      "memoryAllocation": {
        "java": 1545776
      },
      "canTestTest": false,
      "javaSolutionBootstrapCPUTimeMS": 658.194
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,0 @@",
          "-    System.out.println(greeter);"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-    String greeter = new Scanner(\"testing.txt\").useDelimiter(\"\\\\A\").next();",
          "+    String greeter = new Scanner(\"testing,txt\").useDelimiter(\"\\\\A\").next();"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_LOOKALIKE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-    String greeter = new Scanner(\"testing.txt\").useDelimiter(\"\\\\A\").next();",
          "+    String greeter = new Scanner(\"Testing.txt\").useDelimiter(\"\\\\A\").next();"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,3 +6,1 @@",
          "-    // mutate-disable-string-literal-trim mutate-disable-string-literal",
          "-    String greeter = new Scanner(\"testing.txt\").useDelimiter(\"\\\\A\").next();",
          "-    System.out.println(greeter);",
          "+    return;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 0,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/readhelloworld/Question.java"
  },
  {
    "published": {
      "contentHash": "569c84817e65063ba59cf01e22724df2-v2024.6.1",
      "path": "recursive-factorial",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "name": "Recursive Factorial",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.recursivefactorial",
      "klass": "Question",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Write a class method that provides a recursive implementation of factorial,\naccepting and returning <code>long</code> arguments.\nThrow an <code>IllegalArgumentException</code> on invalid inputs.</p>",
        "kotlin": "<p>Write a method that provides a recursive implementation of factorial, accepting and returning <code>Long</code> arguments.\nThrow an <code>IllegalArgumentException</code> on invalid inputs.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 2,
            "IF_STATEMENTS": 2,
            "METHOD": 1,
            "RETURN": 2,
            "CLASS": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "REFERENCE_EQUALITY": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 43
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "THROW",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 4,
                "column": 12
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 42
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 6,
                "column": 8
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 6,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 6,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 6
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 7,
                "column": 6
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 14
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 9,
                "column": 11
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 9,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 39
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "long"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 1,
            "IF_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2,
            "EQUALITY": 1,
            "REQUIRE_OR_CHECK": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 33
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "REQUIRE_OR_CHECK",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 2,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "EQUALITY",
              "location": {
                "line": 3,
                "column": 12
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 4,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 11
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 15
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 33
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 36
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 11,
          "comment": 0,
          "blank": 1
        },
        "kotlin": {
          "source": 7,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 4,
        "kotlin": 3
      },
      "recursiveMethodsByLanguage": {
        "java": [
          {
            "className": "Question",
            "methodName": "factorial",
            "descriptor": "(J)J"
          }
        ],
        "kotlin": [
          {
            "className": "QuestionKt",
            "methodName": "factorial",
            "descriptor": "(J)J"
          }
        ]
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Throwable",
          "java.lang.IllegalArgumentException",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "java.lang.Throwable",
          "java.lang.IllegalArgumentException",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/recursivefactorial/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/recursivefactorial/correct/kotlin/Question.kt",
        "src/main/java/com/github/cs124_illinois/questioner/testing/recursivefactorial/incorrect/java/iterative/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FixedParameters;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n/*\n * Write a class method that provides a recursive implementation of factorial,\n * accepting and returning `long` arguments.\n * Throw an `IllegalArgumentException` on invalid inputs.\n */\n\n@Correct(name = \"Recursive Factorial\", version = \"2022.7.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  public static long factorial(long input) {\n    if (input <= 0) { // mutate-disable-conditional-boundary\n      throw new IllegalArgumentException();\n    }\n    if (input == 1) {\n      return 1;\n    }\n    return input * factorial(input - 1);\n  }\n\n  @FixedParameters private static final List<Long> FIXED = Arrays.asList(-10L, -1L, 0L, 1L, 2L);\n\n  @RandomParameters\n  private static long randomParameters(Random random) {\n    return random.nextInt(32);\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/recursivefactorial/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "public class Question {\n  public static long factorial(long input) {\n    if (input <= 0) { // mutate-disable-conditional-boundary\n      throw new IllegalArgumentException();\n    }\n    if (input == 1) {\n      return 1;\n    }\n    return input * factorial(input - 1);\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/recursivefactorial/Question.java",
        "complexity": 4,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 2,
            "IF_STATEMENTS": 2,
            "METHOD": 1,
            "RETURN": 2,
            "CLASS": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "REFERENCE_EQUALITY": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 43
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "THROW",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 4,
                "column": 12
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 42
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 6,
                "column": 8
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 6,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 6,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 6
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 7,
                "column": 6
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 14
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 9,
                "column": 11
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 9,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 39
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "long"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 11,
          "comment": 0,
          "blank": 1
        },
        "expectedDeadCount": 0,
        "suppressions": []
      },
      "kotlin": {
        "klass": "QuestionKt",
        "contents": "fun factorial(input: Long): Long {\n  require(input > 0)\n  if (input == 1L) {\n    return 1\n  }\n  return input * factorial(input - 1)\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/recursivefactorial/correct/kotlin/Question.kt",
        "complexity": 3,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 1,
            "IF_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2,
            "EQUALITY": 1,
            "REQUIRE_OR_CHECK": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 33
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "REQUIRE_OR_CHECK",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 2,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "EQUALITY",
              "location": {
                "line": 3,
                "column": 12
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 4,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 11
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 15
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 33
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 36
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 7,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "QuestionKt",
        "contents": "fun factorial(input: Long): Long {\n  require(input > 0)\n  if (input == 1L) {\n    return 1\n  }\n  return input * factorial(input - 1)\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/recursivefactorial/correct/kotlin/Question.kt",
        "complexity": 3,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 1,
            "IF_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2,
            "EQUALITY": 1,
            "REQUIRE_OR_CHECK": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 33
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "REQUIRE_OR_CHECK",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 2,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "EQUALITY",
              "location": {
                "line": 3,
                "column": 12
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 4,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 11
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 15
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 6,
                "column": 33
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 36
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 7,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [
      {
        "klass": "Question",
        "contents": "public class Question {\n  public static long factorial(long input) {\n    if (input <= 0) {\n      throw new IllegalArgumentException();\n    }\n    long result = 1;\n    for (long multiplier = 2; multiplier <= input; multiplier++) {\n      result *= multiplier;\n    }\n    return result;\n  }\n}\n",
        "reason": "RECURSION",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/recursivefactorial/incorrect/java/iterative/Question.java",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      }
    ],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Throwable",
        "java.lang.IllegalArgumentException",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "java.lang.Throwable",
        "java.lang.IllegalArgumentException",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "java.lang.Object",
        "java.lang.Class",
        "QuestionKt",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 147264,
        "kotlin": 147072
      },
      "allocationLimit": {
        "java": 351232,
        "kotlin": 351232
      },
      "solutionClassSize": {
        "java": 231,
        "kotlin": 356
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [
          {
            "className": "Question",
            "methodName": "factorial",
            "descriptor": "(J)J"
          }
        ],
        "kotlin": [
          {
            "className": "QuestionKt",
            "methodName": "factorial",
            "descriptor": "(J)J"
          }
        ]
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 2857856,
        "kotlin": 2857856
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 6,
      "mutationCount": 22,
      "solutionMaxRuntime": 10,
      "bootstrapLength": 6600,
      "mutationLength": 79,
      "incorrectLength": 1291,
      "calibrationLength": 329,
      "solutionCoverage": {
        "covered": 6,
        "total": 6,
        "missed": 0
      },
      "executionCounts": {
        "java": 9204,
        "kotlin": 9192
      },
      "memoryAllocation": {
        "java": 21952,
        "kotlin": 21952
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 545.604
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,7 +3,1 @@",
          "-    if (input <= 0) { // mutate-disable-conditional-boundary",
          "-      throw new IllegalArgumentException();",
          "-    }",
          "-    if (input == 1) {",
          "-      return 1;",
          "-    }",
          "-    return input * factorial(input - 1);",
          "+    return 0L;"
        ],
        "language": "java",
        "incorrectIndex": 0,
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,3 +3,0 @@",
          "-    if (input <= 0) { // mutate-disable-conditional-boundary",
          "-      throw new IllegalArgumentException();",
          "-    }"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (input <= 0) { // mutate-disable-conditional-boundary",
          "+    if (!(input <= 0)) { // mutate-disable-conditional-boundary"
        ],
        "language": "java",
        "mutation": "PRIMITIVE_RETURN",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (input <= 0) { // mutate-disable-conditional-boundary",
          "+    if (input > 0) { // mutate-disable-conditional-boundary"
        ],
        "language": "java",
        "mutation": "NEGATE_IF",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,3 +6,0 @@",
          "-    if (input == 1) {",
          "-      return 1;",
          "-    }"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (input <= 0) { // mutate-disable-conditional-boundary",
          "+    if (input <= 1) { // mutate-disable-conditional-boundary"
        ],
        "language": "java",
        "mutation": "REMOVE_IF",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    if (input == 1) {",
          "+    if (input == 0) {"
        ],
        "language": "java",
        "mutation": "PRIMITIVE_RETURN",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    if (input == 1) {",
          "+    if (input != 1) {"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-      return 1;",
          "+      return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-      return 1;",
          "+      return 2;"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    if (input == 1) {",
          "+    if (!(input == 1)) {"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    if (input == 1) {",
          "+    if (input == 2) {"
        ],
        "language": "java",
        "mutation": "MATH",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return input * factorial(input - 1);",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return input * factorial(input - 1);",
          "+    return input * factorial(input - 2);"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return input * factorial(input - 1);",
          "+    return input * factorial(input - 0);"
        ],
        "language": "java",
        "mutation": "NEGATE_IF",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return input * factorial(input - 1);",
          "+    return factorial(input - 1);"
        ],
        "language": "java",
        "mutation": "REMOVE_IF",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return input * factorial(input - 1);",
          "+    return input * factorial(1);"
        ],
        "language": "java",
        "mutation": "MATH",
        "testCount": 5,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return input * factorial(input - 1);",
          "+    return input;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 5,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return input * factorial(input - 1);",
          "+    return input / factorial(input - 1);"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 5,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/recursivefactorial/Question.java"
  },
  {
    "published": {
      "contentHash": "1933eb154d0af63b7af722e30dc6437f-v2024.6.1",
      "path": "test-bad-kotlin-getter-setter",
      "author": "challen@illinois.edu",
      "version": "2023.10.0",
      "name": "Test Bad Kotlin Getter Setter",
      "type": "KLASS",
      "packageName": "com.examples.testing.badkotlingettersetter",
      "klass": "Example",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Test to ensure that we can detect unnecessary Kotlin setter or getter overrides.</p>",
        "kotlin": "<p>Test to ensure that we can detect unnecessary Kotlin setter or getter overrides.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 2,
            "METHOD": 2,
            "RETURN": 1,
            "CONSTRUCTOR": 1,
            "GETTER": 1,
            "SETTER": 1,
            "STRING": 4,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 5
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 21
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 17
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 33
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 8,
                "column": 26
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 15
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 12,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 12,
                "column": 9
              }
            },
            {
              "feature": "SETTER",
              "location": {
                "line": 12,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 12,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 12,
                "column": 38
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 13,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 14,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 15,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "CONSTRUCTOR": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1
          },
          "featureList": [
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 1,
                "column": 13
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 1,
                "column": 14
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 12,
          "comment": 0,
          "blank": 4
        },
        "kotlin": {
          "source": 1,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 3,
        "kotlin": 1
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "java.lang.Integer",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/Example.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/correct/kotlin/Example.kt",
        "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/incorrect/kotlin/badgetter/Example.kt",
        "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/incorrect/kotlin/badsetter/Example.kt"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Example",
      "contents": "import edu.illinois.cs.cs125.jeed.core.FeatureName;\nimport edu.illinois.cs.cs125.jeed.core.Features;\nimport edu.illinois.cs.cs125.questioner.lib.CheckFeatures;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.FeatureCheckException;\nimport edu.illinois.cs.cs125.questioner.lib.Language;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/*\n * Test to ensure that we can detect unnecessary Kotlin setter or getter overrides.\n */\n\n@Correct(\n    name = \"Test Bad Kotlin Getter Setter\",\n    version = \"2023.10.0\",\n    author = \"challen@illinois.edu\")\npublic class Example {\n  private String name;\n\n  public Example(String setName) {\n    name = setName;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String setName) {\n    name = setName;\n  }\n\n  @CheckFeatures\n  private static List<String> checkFeatures(\n      Language language, Features solution, Features submission) {\n    if (language == Language.kotlin) {\n      if (submission.getFeatureMap().containsKey(FeatureName.GETTER)) {\n        throw new FeatureCheckException(\"Solution overrides a getter unnecessarily\");\n      }\n      if (submission.getFeatureMap().containsKey(FeatureName.SETTER)) {\n        throw new FeatureCheckException(\"Solution overrides a setter unnecessarily\");\n      }\n    }\n    return new ArrayList<>();\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/Example.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Example",
        "contents": "public class Example {\n  private String name;\n\n  public Example(String setName) {\n    name = setName;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String setName) {\n    name = setName;\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/Example.java",
        "complexity": 3,
        "features": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 2,
            "METHOD": 2,
            "RETURN": 1,
            "CONSTRUCTOR": 1,
            "GETTER": 1,
            "SETTER": 1,
            "STRING": 4,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 5
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 21
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 17
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 33
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 8,
                "column": 26
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 15
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 12,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 12,
                "column": 9
              }
            },
            {
              "feature": "SETTER",
              "location": {
                "line": 12,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 12,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 12,
                "column": 38
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 13,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 13,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 14,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 15,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 12,
          "comment": 0,
          "blank": 4
        },
        "expectedDeadCount": 0,
        "suppressions": []
      },
      "kotlin": {
        "klass": "Example",
        "contents": "class Example(var name: String?)",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/correct/kotlin/Example.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "CONSTRUCTOR": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1
          },
          "featureList": [
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 1,
                "column": 13
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 1,
                "column": 14
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 1,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "Example",
        "contents": "class Example(var name: String?)",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/correct/kotlin/Example.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "CONSTRUCTOR": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1
          },
          "featureList": [
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 1,
                "column": 13
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 1,
                "column": 14
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 1,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [
      {
        "klass": "Example",
        "contents": "class Example(name: String?) {\n  var name = name\n    get() {\n      return field\n    }\n}",
        "reason": "FEATURES",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/incorrect/kotlin/badgetter/Example.kt",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": [
          "RedundantGetter"
        ]
      },
      {
        "klass": "Example",
        "contents": "class Example(name: String?) {\n  var name = name\n    set(value) {\n      field = value\n    }\n}",
        "reason": "FEATURES",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/incorrect/kotlin/badsetter/Example.kt",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": [
          "RedundantSetter"
        ]
      }
    ],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Example",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Integer",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Example",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 5616,
        "kotlin": 3072
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      },
      "solutionClassSize": {
        "java": 264,
        "kotlin": 632
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 27,
      "mutationCount": 5,
      "solutionMaxRuntime": 11,
      "bootstrapLength": 6527,
      "mutationLength": 9,
      "incorrectLength": 1240,
      "calibrationLength": 330,
      "solutionCoverage": {
        "covered": 6,
        "total": 6,
        "missed": 0
      },
      "executionCounts": {
        "java": 351,
        "kotlin": 192
      },
      "memoryAllocation": {
        "java": 352,
        "kotlin": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 289.949
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return name;",
          "+    return \"\";"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return name;",
          "+    return null;"
        ],
        "language": "java",
        "incorrectIndex": 1,
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,3 +4,1 @@",
          "-  public Example(String setName) {",
          "-    name = setName;",
          "-  }",
          "+  public Example(String setName) {}"
        ],
        "language": "java",
        "incorrectIndex": 0,
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -13,1 +13,1 @@",
          "-    name = setName;",
          "+    return;"
        ],
        "language": "java",
        "mutation": "NULL_RETURN",
        "testCount": 6,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -12,3 +12,1 @@",
          "-  public void setName(String setName) {",
          "-    name = setName;",
          "-  }",
          "+  public void setName(String setName) {}"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 6,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/badkotlingettersetter/Example.java"
  },
  {
    "published": {
      "contentHash": "caa4922981779dbc69b038999e5b6a16-v2024.6.1",
      "path": "test-constructor-notnull",
      "author": "challen@illinois.edu",
      "version": "2022.10.0",
      "name": "Test Constructor NotNull",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.withconstructornotnull",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Testing @NotNull annotation on constructor parameters.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "CONSTRUCTOR": 1,
            "GETTER": 1,
            "STRING": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 4,
            "FINAL_FIELD": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 32
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 5,
                "column": 19
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 5,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 33
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 8,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 23
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int",
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "length"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 9,
          "comment": 0,
          "blank": 3
        }
      },
      "complexity": {
        "java": 2
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "java.lang.Integer",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withconstructornotnull/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.NotNull;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Testing @NotNull annotation on constructor parameters.\n */\n\n@Correct(name = \"Test Constructor NotNull\", version = \"2022.10.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  private final int stringLength;\n\n  public Question(@NotNull String value) {\n    stringLength = value.length();\n  }\n\n  public int getStringLength() {\n    return stringLength;\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withconstructornotnull/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "public class Question {\n  private final int stringLength;\n\n  public Question(String value) {\n    stringLength = value.length();\n  }\n\n  public int getStringLength() {\n    return stringLength;\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withconstructornotnull/Question.java",
        "complexity": 2,
        "features": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "CONSTRUCTOR": 1,
            "GETTER": 1,
            "STRING": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 4,
            "FINAL_FIELD": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_FIELD",
              "location": {
                "line": 2,
                "column": 10
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 32
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 5,
                "column": 19
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 5,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 33
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "GETTER",
              "location": {
                "line": 8,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 8,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 23
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int",
            "String"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "length"
          ]
        },
        "lineCount": {
          "source": 9,
          "comment": 0,
          "blank": 3
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Integer",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 5856
      },
      "allocationLimit": {
        "java": 5632
      },
      "solutionClassSize": {
        "java": 231
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 27,
      "mutationCount": 4,
      "solutionMaxRuntime": 98,
      "bootstrapLength": 2791,
      "mutationLength": 29,
      "incorrectLength": 200,
      "calibrationLength": 111,
      "solutionCoverage": {
        "covered": 4,
        "total": 4,
        "missed": 0
      },
      "executionCounts": {
        "java": 366
      },
      "memoryAllocation": {
        "java": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 308.601
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    stringLength = value.length();",
          "+    stringLength = value.length() - 1;"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    return stringLength;",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    stringLength = value.length();",
          "+    stringLength = value.length() + 1;"
        ],
        "language": "java",
        "mutation": "MODIFY_LENGTH_AND_SIZE",
        "testCount": 1,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withconstructornotnull/Question.java"
  },
  {
    "published": {
      "contentHash": "99edd2570f09907ad4b8f37d339ef6b4-v2024.6.1",
      "path": "test-empty-constructor",
      "author": "challen@illinois.edu",
      "version": "2022.9.0",
      "name": "Test Empty Constructor",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.withemptyconstructor",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Test to make sure we can parse the empty constructor.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 1,
            "UNARY_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 2
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 13
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 11
              }
            },
            {
              "feature": "UNARY_OPERATORS",
              "location": {
                "line": 5,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 6,
          "comment": 0,
          "blank": 2
        }
      },
      "complexity": {
        "java": 1
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "java.lang.Integer",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withemptyconstructor/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withemptyconstructor/correct/java/emptyconstructor/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Test to make sure we can parse the empty constructor.\n */\n\n@Correct(name = \"Test Empty Constructor\", version = \"2022.9.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  private int value = 0;\n\n  int next() {\n    return value++;\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withemptyconstructor/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "public class Question {\n  private int value = 0;\n\n  int next() {\n    return value++;\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withemptyconstructor/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 1,
            "UNARY_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 2
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 13
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 11
              }
            },
            {
              "feature": "UNARY_OPERATORS",
              "location": {
                "line": 5,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 6,
          "comment": 0,
          "blank": 2
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "Question",
        "contents": "public class Question {\n  private int value;\n\n  public Question() {\n    value = 0;\n  }\n\n  int next() {\n    return value++;\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withemptyconstructor/correct/java/emptyconstructor/Question.java",
        "complexity": 2,
        "features": {
          "featureMap": {
            "VARIABLE_REASSIGNMENTS": 2,
            "UNARY_OPERATORS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "CONSTRUCTOR": 1,
            "CLASS": 1,
            "CLASS_FIELD": 1,
            "VISIBILITY_MODIFIERS": 3
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "CLASS_FIELD",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "CONSTRUCTOR",
              "location": {
                "line": 4,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 20
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 13
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 8,
                "column": 13
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 9,
                "column": 4
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 9,
                "column": 11
              }
            },
            {
              "feature": "UNARY_OPERATORS",
              "location": {
                "line": 9,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 18
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 11,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 9,
          "comment": 0,
          "blank": 3
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Integer",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 6144
      },
      "allocationLimit": {
        "java": 5632
      },
      "solutionClassSize": {
        "java": 114
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 8,
      "mutationCount": 3,
      "solutionMaxRuntime": 13,
      "bootstrapLength": 3623,
      "mutationLength": 9,
      "incorrectLength": 114,
      "calibrationLength": 68,
      "solutionCoverage": {
        "covered": 3,
        "total": 3,
        "missed": 0
      },
      "executionCounts": {
        "java": 384
      },
      "memoryAllocation": {
        "java": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 339.35
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  private int value = 0;",
          "+  private int value = 1;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    return value++;",
          "+    return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 7,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    return value++;",
          "+    return value--;"
        ],
        "language": "java",
        "mutation": "INCREMENT_DECREMENT",
        "testCount": 7,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withemptyconstructor/Question.java"
  },
  {
    "published": {
      "contentHash": "00c2c0d452cdc275a3b0d69d34034246-v2024.6.1",
      "path": "test-memoization-defense",
      "author": "challen@illinois.edu",
      "version": "2023.10.0",
      "name": "Test Memoization Defense",
      "type": "METHOD",
      "packageName": "com.github.cs124_illinois.questioner.testing.testmemoizationdefense",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Testing class size based memoization defense.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 27
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 14
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 1
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "java.lang.Integer",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/testmemoizationdefense/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/testmemoizationdefense/incorrect/java/memoized/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\n\n/*\n * Testing class size based memoization defense.\n */\n\n@Correct(name = \"Test Memoization Defense\", version = \"2023.10.0\", author = \"challen@illinois.edu\")\n@Wrap\npublic class Question {\n  int returnValue(int value) {\n    return value;\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/testmemoizationdefense/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "int returnValue(int value) {\n  return value;\n}",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/testmemoizationdefense/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 27
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 14
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [
      {
        "klass": "Question",
        "contents": "int returnValue(int value) {\n  int[] values = {\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n  };\n  return value;\n}",
        "reason": "CLASSSIZE",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/testmemoizationdefense/incorrect/java/memoized/Question.java",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      }
    ],
    "commonFiles": [],
    "templateByLanguage": {
      "java": "public class Question {\n  {{{ contents }}}\n}"
    },
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Integer",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 3072
      },
      "allocationLimit": {
        "java": 5632
      },
      "solutionClassSize": {
        "java": 107
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 12,
      "mutationCount": 1,
      "solutionMaxRuntime": 81,
      "bootstrapLength": 1843,
      "mutationLength": 78,
      "incorrectLength": 348,
      "calibrationLength": 308,
      "solutionCoverage": {
        "covered": 1,
        "total": 1,
        "missed": 0
      },
      "executionCounts": {
        "java": 192
      },
      "memoryAllocation": {
        "java": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 483.909
    },
    "fauxStatic": true,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return value;",
          "+  return 0;"
        ],
        "language": "java",
        "incorrectIndex": 0,
        "testCount": 0,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/testmemoizationdefense/Question.java"
  },
  {
    "published": {
      "contentHash": "51ba370a3098f7354b7a659ce0e68542-v2024.6.1",
      "path": "test-raw-types",
      "author": "challen@illinois.edu",
      "version": "2023.11.0",
      "name": "Test Raw Types",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.withrawtypes",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Test support for raw type error filtering.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "IMPORT": 2
          },
          "featureList": [
            {
              "feature": "IMPORT",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "IMPORT",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 5,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 5,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 5,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 6,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 26
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 8,
                "column": 0
              }
            }
          ],
          "importList": [
            "java.util.ArrayList",
            "java.util.List"
          ],
          "typeList": [
            "List"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 7,
          "comment": 0,
          "blank": 2
        }
      },
      "complexity": {
        "java": 1
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Integer",
          "java.util.ArrayList",
          "java.util.List",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withrawtypes/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/*\n * Test support for raw type error filtering.\n */\n@SuppressWarnings(\"rawtypes\")\n@Correct(name = \"Test Raw Types\", version = \"2023.11.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  public static List testing() {\n    return new ArrayList();\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withrawtypes/Question.java",
      "suppressions": [
        "rawtypes"
      ]
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Question {\n  public static List testing() {\n    return new ArrayList();\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withrawtypes/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1,
            "IMPORT": 2
          },
          "featureList": [
            {
              "feature": "IMPORT",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "IMPORT",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 5,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 5,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 5,
                "column": 31
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 6,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 26
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 8,
                "column": 0
              }
            }
          ],
          "importList": [
            "java.util.ArrayList",
            "java.util.List"
          ],
          "typeList": [
            "List"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 7,
          "comment": 0,
          "blank": 2
        },
        "expectedDeadCount": 0,
        "suppressions": [
          "rawtypes"
        ]
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Integer",
        "java.util.ArrayList",
        "java.util.List",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 3072
      },
      "allocationLimit": {
        "java": 105088
      },
      "solutionClassSize": {
        "java": 115
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [
        "rawtypes"
      ],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 1580672,
        "kotlin": 1580672
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 1,
      "mutationCount": 1,
      "solutionMaxRuntime": 90,
      "bootstrapLength": 1804,
      "mutationLength": 114,
      "incorrectLength": 350,
      "calibrationLength": 220,
      "solutionCoverage": {
        "covered": 2,
        "total": 2,
        "missed": 0
      },
      "executionCounts": {
        "java": 192
      },
      "memoryAllocation": {
        "java": 6568
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 465.933
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    return new ArrayList();",
          "+    return null;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 0,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withrawtypes/Question.java"
  },
  {
    "published": {
      "contentHash": "c14d76df7271c791ccc5c93981b5d1c8-v2024.6.1",
      "path": "with-common-code",
      "author": "challen@illinois.edu",
      "version": "2023.12.0",
      "name": "With Common Code",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.withcommoncode",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Test loading common code.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 45
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 3,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 27
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "Value",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 5,
          "comment": 0,
          "blank": 1
        }
      },
      "complexity": {
        "java": 1
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Integer",
          "java.lang.Long",
          "Value",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withcommoncode/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Test loading common code.\n */\n\n@Correct(name = \"With Common Code\", version = \"2023.12.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  public static Value createValue(int value) {\n    return new Value(value);\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withcommoncode/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "public class Question {\n  public static Value createValue(int value) {\n    return new Value(value);\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withcommoncode/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "CLASS": 1,
            "NEW_KEYWORD": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 45
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 3,
                "column": 11
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 27
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "Value",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 5,
          "comment": 0,
          "blank": 1
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [],
    "commonFiles": [
      {
        "klass": "Value",
        "contents": "import java.util.Objects;\n\npublic class Value {\n  private int value;\n\n  public Value(int setValue) {\n    value = setValue;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    Value value1 = (Value) o;\n    return value == value1.value;\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(value);\n  }\n}\n",
        "language": "java"
      }
    ],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Value",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 3072
      },
      "allocationLimit": {
        "java": 54784
      },
      "solutionClassSize": {
        "java": 148
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 792064,
        "kotlin": 792064
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 11,
      "mutationCount": 1,
      "solutionMaxRuntime": 63,
      "bootstrapLength": 1780,
      "mutationLength": 99,
      "incorrectLength": 338,
      "calibrationLength": 88,
      "solutionCoverage": {
        "covered": 2,
        "total": 2,
        "missed": 0
      },
      "executionCounts": {
        "java": 192
      },
      "memoryAllocation": {
        "java": 3424
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 491.093
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    return new Value(value);",
          "+    return null;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 0,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withcommoncode/Question.java"
  },
  {
    "published": {
      "contentHash": "3247a24e43fa77810da0ee41da0d8e7d-v2024.6.1",
      "path": "with-dead-code-annotation",
      "author": "challen@illinois.edu",
      "version": "2023.2.0",
      "name": "With Dead Code Annotation",
      "type": "KLASS",
      "packageName": "com.github.cs124_illinois.questioner.testing.withdeadcodeannotation",
      "klass": "Question",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Testing dead code comments.</p>",
        "kotlin": "<p>Testing dead code comments.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 1,
            "IF_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2,
            "CLASS": 1,
            "ASSERT": 1,
            "REFERENCE_EQUALITY": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 40
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 4,
                "column": 13
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 16
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 13
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "IF_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2,
            "ASSERT": 1,
            "EQUALITY": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 30
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "EQUALITY",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 17
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 10
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 8,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 9,
          "comment": 1,
          "blank": 1
        },
        "kotlin": {
          "source": 7,
          "comment": 0,
          "blank": 1
        }
      },
      "complexity": {
        "java": 3,
        "kotlin": 3
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Throwable",
          "java.lang.AssertionError",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "java.lang.Throwable",
          "java.lang.AssertionError",
          "java.lang.Integer",
          "java.lang.Long",
          "kotlin._Assertions",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withdeadcodeannotation/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withdeadcodeannotation/correct/kotlin/Question.kt"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\n\n/*\n * Testing dead code comments.\n */\n@Correct(name = \"With Dead Code Annotation\", version = \"2023.2.0\", author = \"challen@illinois.edu\")\npublic class Question {\n  public static int whatever(int value) {\n    if (value % 2 == 0) {\n      return value * 2;\n    }\n    assert false;\n    // mutate-disable\n    return -1; // dead code\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withdeadcodeannotation/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "public class Question {\n  public static int whatever(int value) {\n    if (value % 2 == 0) {\n      return value * 2;\n    }\n    assert false;\n    // mutate-disable\n    return -1;\n  }\n}\n",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withdeadcodeannotation/Question.java",
        "complexity": 3,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "COMPARISON_OPERATORS": 1,
            "IF_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2,
            "CLASS": 1,
            "ASSERT": 1,
            "REFERENCE_EQUALITY": 1,
            "VISIBILITY_MODIFIERS": 2,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "CLASS",
              "location": {
                "line": 1,
                "column": 7
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "VISIBILITY_MODIFIERS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 2,
                "column": 9
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 40
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "REFERENCE_EQUALITY",
              "location": {
                "line": 3,
                "column": 8
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 4,
                "column": 6
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 4,
                "column": 13
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 6,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 16
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 8,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 13
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 9,
          "comment": 1,
          "blank": 1
        },
        "expectedDeadCount": 1,
        "suppressions": []
      },
      "kotlin": {
        "klass": "QuestionKt",
        "contents": "fun whatever(value: Int): Int {\n  if (value % 2 == 0) {\n    return value * 2\n  }\n  assert(false)\n\n  return -1\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withdeadcodeannotation/correct/kotlin/Question.kt",
        "complexity": 3,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "IF_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2,
            "ASSERT": 1,
            "EQUALITY": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 30
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "EQUALITY",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 17
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 10
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 8,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 7,
          "comment": 0,
          "blank": 1
        },
        "expectedDeadCount": 1,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "QuestionKt",
        "contents": "fun whatever(value: Int): Int {\n  if (value % 2 == 0) {\n    return value * 2\n  }\n  assert(false)\n\n  return -1\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withdeadcodeannotation/correct/kotlin/Question.kt",
        "complexity": 3,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 2,
            "IF_STATEMENTS": 1,
            "METHOD": 1,
            "RETURN": 2,
            "ASSERT": 1,
            "EQUALITY": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 30
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "IF_STATEMENTS",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 2,
                "column": 12
              }
            },
            {
              "feature": "EQUALITY",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 4
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 17
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "ASSERT",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 10
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 8,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 7,
          "comment": 0,
          "blank": 1
        },
        "expectedDeadCount": 1,
        "suppressions": []
      }
    ],
    "incorrectExamples": [],
    "commonFiles": [],
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Throwable",
        "java.lang.AssertionError",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "java.lang.Throwable",
        "java.lang.AssertionError",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "kotlin._Assertions",
        "java.lang.Object",
        "java.lang.Class",
        "QuestionKt",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 6160,
        "kotlin": 6144
      },
      "allocationLimit": {
        "java": 2568832,
        "kotlin": 2598784
      },
      "solutionClassSize": {
        "java": 384,
        "kotlin": 317
      },
      "solutionDeadCode": {
        "java": 1,
        "kotlin": 1
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 43781632,
        "kotlin": 43781632
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 11,
      "mutationCount": 17,
      "solutionMaxRuntime": 18,
      "bootstrapLength": 6687,
      "mutationLength": 42,
      "incorrectLength": 834,
      "calibrationLength": 449,
      "solutionCoverage": {
        "covered": 4,
        "total": 5,
        "missed": 1
      },
      "executionCounts": {
        "java": 385,
        "kotlin": 384
      },
      "memoryAllocation": {
        "java": 160552,
        "kotlin": 162424
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 353.012
    },
    "fauxStatic": false,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (value % 2 == 0) {",
          "+    if (!(value % 2 == 0)) {"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    assert false;",
          "+    assert true;"
        ],
        "language": "java",
        "mutation": "CHANGE_EQUALS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (value % 2 == 0) {",
          "+    if (value % 2 != 0) {"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (value % 2 == 0) {",
          "+    if (value % 1 == 0) {"
        ],
        "language": "java",
        "mutation": "MATH",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,0 @@",
          "-    assert false;"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (value % 2 == 0) {",
          "+    if (value % 2 == 1) {"
        ],
        "language": "java",
        "mutation": "REMOVE_IF",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-      return value * 2;",
          "+      return 2;"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (value % 2 == 0) {",
          "+    if (2 == 0) {"
        ],
        "language": "java",
        "mutation": "NEGATE_IF",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,3 +3,0 @@",
          "-    if (value % 2 == 0) {",
          "-      return value * 2;",
          "-    }"
        ],
        "language": "java",
        "mutation": "NEGATE_CONDITIONAL",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-      return value * 2;",
          "+      return value * 3;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (value % 2 == 0) {",
          "+    if (value * 2 == 0) {"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (value % 2 == 0) {",
          "+    if (value % 3 == 0) {"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-      return value * 2;",
          "+      return value / 2;"
        ],
        "language": "java",
        "mutation": "PRIMITIVE_RETURN",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-      return value * 2;",
          "+      return value;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    if (value % 2 == 0) {",
          "+    if (value == 0) {"
        ],
        "language": "java",
        "mutation": "MATH",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-      return value * 2;",
          "+      return 0;"
        ],
        "language": "java",
        "mutation": "BOOLEAN_LITERAL",
        "testCount": 4,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withdeadcodeannotation/Question.java"
  },
  {
    "published": {
      "contentHash": "736308f223c73871743d16c35e1dff2c-v2024.6.1",
      "path": "with-feature-check",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "name": "With Feature Check",
      "type": "METHOD",
      "packageName": "com.github.cs124_illinois.questioner.testing.withfeaturecheck",
      "klass": "Question",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Test whether feature checking works.</p>",
        "kotlin": "<p>For testing features.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 3,
            "METHOD": 1,
            "RETURN": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 21
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 10
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 34
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 3,
            "METHOD": 1,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 35
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 44
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 49
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "kotlin": {
          "source": 1,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 1,
        "kotlin": 1
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "java.lang.Integer",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/correct/kotlin/Question.kt",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/incorrect/java/usesloop/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/incorrect/kotlin/usesloop/Question.kt"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jeed.core.Features;\nimport edu.illinois.cs.cs125.jenisol.core.BoundComplexity;\nimport edu.illinois.cs.cs125.jenisol.core.FilterParameters;\nimport edu.illinois.cs.cs125.jenisol.core.SkipTest;\nimport edu.illinois.cs.cs125.questioner.lib.CheckFeatures;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.FeatureCheckException;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport edu.illinois.cs.cs125.questioner.lib.features.FeatureHelpers;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/*\n * Test whether feature checking works.\n */\n\n@Correct(name = \"With Feature Check\", author = \"challen@illinois.edu\", version = \"2022.7.0\")\n@Wrap\npublic class Question {\n  @FilterParameters\n  private static void filterParameters(int range) {\n    if (range < 0) {\n      throw new SkipTest();\n    }\n    if (range > 1024) {\n      throw new BoundComplexity();\n    }\n  }\n\n  int sumTo(int range) {\n    return (range * (range + 1)) / 2;\n  }\n\n  @CheckFeatures\n  private static List<String> checkFeatures(Features solution, Features submission) {\n    if (FeatureHelpers.usesLoop(submission)) {\n      throw new FeatureCheckException(\"Submission uses a loop\");\n    }\n    return new ArrayList<>();\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "int sumTo(int range) {\n  return (range * (range + 1)) / 2;\n}",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 3,
            "METHOD": 1,
            "RETURN": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 21
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 10
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 34
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      },
      "kotlin": {
        "klass": "Question",
        "contents": "fun sumTo(range: Int): Int = range * (range + 1) / 2",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 3,
            "METHOD": 1,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 35
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 44
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 49
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 1,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "Question",
        "contents": "fun sumTo(range: Int): Int = range * (range + 1) / 2",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/correct/kotlin/Question.kt",
        "complexity": 1,
        "features": {
          "featureMap": {
            "ARITHMETIC_OPERATORS": 3,
            "METHOD": 1,
            "STATIC_METHOD": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 35
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 44
              }
            },
            {
              "feature": "ARITHMETIC_OPERATORS",
              "location": {
                "line": 1,
                "column": 49
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 1,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [
      {
        "klass": "Question",
        "contents": "int sumTo(int range) {\n  int sum = 0;\n  for (int i = 0; i <= range; i++) {\n    sum += i;\n  }\n  return sum;\n}",
        "reason": "FEATURES",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/incorrect/java/usesloop/Question.java",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      },
      {
        "klass": "Question",
        "contents": "fun sumTo(range: Int): Int {\n  var sum = 0\n  (0..range).forEach { i ->\n    sum += i\n  }\n  return sum\n}",
        "reason": "FEATURES",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/incorrect/kotlin/usesloop/Question.kt",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": [
          "ForEachOnRange"
        ]
      }
    ],
    "commonFiles": [],
    "templateByLanguage": {
      "java": "public class Question {\n  {{{ contents }}}\n}",
      "kotlin": "class Question {\n  {{{ contents }}}\n}"
    },
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 475,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Integer",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 22800,
        "kotlin": 22800
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      },
      "solutionClassSize": {
        "java": 107,
        "kotlin": 263
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 3800,
      "executionCountLimit": {
        "java": 7600,
        "kotlin": 7600
      },
      "allocationLimit": {
        "java": 6656,
        "kotlin": 6656
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 475,
      "mutationCount": 13,
      "solutionMaxRuntime": 40,
      "bootstrapLength": 6687,
      "mutationLength": 22,
      "incorrectLength": 1328,
      "calibrationLength": 339,
      "solutionCoverage": {
        "covered": 1,
        "total": 1,
        "missed": 0
      },
      "executionCounts": {
        "java": 1425,
        "kotlin": 1425
      },
      "memoryAllocation": {
        "java": 352,
        "kotlin": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 569.256
    },
    "fauxStatic": true,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range * (range + 0)) / 2;"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range * (range - 1)) / 2;"
        ],
        "language": "java",
        "mutation": "PLUS_OR_MINUS_ONE_TO_ZERO",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range * (range)) / 2;"
        ],
        "language": "java",
        "incorrectIndex": 0,
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range / (range + 1)) / 2;"
        ],
        "language": "java",
        "mutation": "REMOVE_PLUS",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range) / 2;"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range * (range + 1));"
        ],
        "language": "java",
        "mutation": "MATH",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return 0;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return 2;"
        ],
        "language": "java",
        "mutation": "MATH",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range * (1)) / 2;"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range * (range + 1)) * 2;"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range * (range + 1)) / 3;"
        ],
        "language": "java",
        "incorrectIndex": 1,
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return ((range + 1)) / 2;"
        ],
        "language": "java",
        "mutation": "PLUS_TO_MINUS",
        "testCount": 3,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return (range * (range + 1)) / 2;",
          "+  return (range * (range + 2)) / 2;"
        ],
        "language": "java",
        "mutation": "REMOVE_BINARY",
        "testCount": 3,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturecheck/Question.java"
  },
  {
    "published": {
      "contentHash": "c0e60adbcb8d6e6d1ad0088a3a1271da-v2024.6.1",
      "path": "with-feature-dead-code",
      "author": "challen@illinois.edu",
      "version": "2023.2.0",
      "name": "With Feature Dead Code",
      "type": "METHOD",
      "packageName": "com.github.cs124_illinois.questioner.testing.withfeaturedeadcode",
      "klass": "Question",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Test feature-based dead code correction.</p>",
        "kotlin": "<p>Test feature-based dead code correction.</p>"
      },
      "templateImports": [
        "java.util.ArrayList",
        "java.util.List"
      ],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 2,
            "VARIABLE_ASSIGNMENTS": 2,
            "VARIABLE_REASSIGNMENTS": 1,
            "ASSIGNMENT_OPERATORS": 1,
            "COMPARISON_OPERATORS": 1,
            "FOR_LOOPS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "NEW_KEYWORD": 1,
            "BOXING_CLASSES": 2,
            "TYPE_PARAMETERS": 2,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 2,
                "column": 4
              }
            },
            {
              "feature": "BOXING_CLASSES",
              "location": {
                "line": 2,
                "column": 5
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 37
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 3,
                "column": 6
              }
            },
            {
              "feature": "BOXING_CLASSES",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 3,
                "column": 16
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 3,
                "column": 16
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 3,
                "column": 25
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "FOR_LOOPS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 4,
                "column": 11
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 4,
                "column": 11
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 4,
                "column": 18
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 4,
                "column": 29
              }
            },
            {
              "feature": "ASSIGNMENT_OPERATORS",
              "location": {
                "line": 4,
                "column": 29
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 37
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 37
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 17
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 15
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 8,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 9,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "List<Integer>",
            "Integer",
            "int"
          ],
          "identifierList": [
            "values",
            "i"
          ],
          "dottedMethodList": [
            "add"
          ]
        },
        "kotlin": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 1,
            "VARIABLE_ASSIGNMENTS": 1,
            "FINAL_VARIABLE": 1,
            "FOR_LOOPS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "TYPE_INFERENCE": 2,
            "STATIC_METHOD": 1,
            "TYPE_PARAMETERS": 2,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1,
            "FOR_LOOP_STEP": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 1,
                "column": 34
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 39
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 2,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 2,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 2,
                "column": 6
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 2,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 2,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "FOR_LOOPS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "FOR_LOOP_STEP",
              "location": {
                "line": 3,
                "column": 26
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 4
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 4,
                "column": 10
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 4,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "add"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 7,
          "comment": 0,
          "blank": 0
        },
        "kotlin": {
          "source": 7,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 2,
        "kotlin": 2
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Integer",
          "java.util.ArrayList",
          "java.util.List",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "kotlin.ranges.RangesKt",
          "java.lang.Integer",
          "java.util.ArrayList",
          "java.util.List",
          "java.lang.Long",
          "kotlin.ranges.IntProgression",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturedeadcode/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturedeadcode/correct/kotlin/Question.kt"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.FixedParameters;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n/*\n * Test feature-based dead code correction.\n */\n@Correct(name = \"With Feature Dead Code\", author = \"challen@illinois.edu\", version = \"2023.2.0\")\n@Wrap\npublic class Question {\n  List<Integer> rangeToList(int value) {\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < value; i += 2) {\n      values.add(i);\n    }\n    return values;\n  }\n\n  @FixedParameters private static final List<Integer> FIXED = Arrays.asList(0, 8);\n\n  @RandomParameters\n  private static int randomParameters(Random random) {\n    return random.nextInt(32);\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturedeadcode/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "List<Integer> rangeToList(int value) {\n  List<Integer> values = new ArrayList<>();\n  for (int i = 0; i < value; i += 2) {\n    values.add(i);\n  }\n  return values;\n}",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturedeadcode/Question.java",
        "complexity": 2,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 2,
            "VARIABLE_ASSIGNMENTS": 2,
            "VARIABLE_REASSIGNMENTS": 1,
            "ASSIGNMENT_OPERATORS": 1,
            "COMPARISON_OPERATORS": 1,
            "FOR_LOOPS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "NEW_KEYWORD": 1,
            "BOXING_CLASSES": 2,
            "TYPE_PARAMETERS": 2,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 2,
                "column": 4
              }
            },
            {
              "feature": "BOXING_CLASSES",
              "location": {
                "line": 2,
                "column": 5
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 37
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 3,
                "column": 6
              }
            },
            {
              "feature": "BOXING_CLASSES",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 3,
                "column": 16
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 3,
                "column": 16
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 3,
                "column": 25
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "FOR_LOOPS",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 4,
                "column": 11
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 4,
                "column": 11
              }
            },
            {
              "feature": "COMPARISON_OPERATORS",
              "location": {
                "line": 4,
                "column": 18
              }
            },
            {
              "feature": "VARIABLE_REASSIGNMENTS",
              "location": {
                "line": 4,
                "column": 29
              }
            },
            {
              "feature": "ASSIGNMENT_OPERATORS",
              "location": {
                "line": 4,
                "column": 29
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 4,
                "column": 37
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 37
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 5,
                "column": 4
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 17
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 15
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 8,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 9,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "List<Integer>",
            "Integer",
            "int"
          ],
          "identifierList": [
            "values",
            "i"
          ],
          "dottedMethodList": [
            "add"
          ]
        },
        "lineCount": {
          "source": 7,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      },
      "kotlin": {
        "klass": "Question",
        "contents": "fun rangeToList(value: Int): List<Int> {\n  val values = mutableListOf<Int>()\n  for (i in 0 until value step 2) {\n    values.add(i)\n  }\n  return values\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturedeadcode/correct/kotlin/Question.kt",
        "complexity": 2,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 1,
            "VARIABLE_ASSIGNMENTS": 1,
            "FINAL_VARIABLE": 1,
            "FOR_LOOPS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "TYPE_INFERENCE": 2,
            "STATIC_METHOD": 1,
            "TYPE_PARAMETERS": 2,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1,
            "FOR_LOOP_STEP": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 1,
                "column": 34
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 39
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 2,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 2,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 2,
                "column": 6
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 2,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 2,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "FOR_LOOPS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "FOR_LOOP_STEP",
              "location": {
                "line": 3,
                "column": 26
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 4
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 4,
                "column": 10
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 4,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "add"
          ]
        },
        "lineCount": {
          "source": 7,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "Question",
        "contents": "fun rangeToList(value: Int): List<Int> {\n  val values = mutableListOf<Int>()\n  for (i in 0 until value step 2) {\n    values.add(i)\n  }\n  return values\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturedeadcode/correct/kotlin/Question.kt",
        "complexity": 2,
        "features": {
          "featureMap": {
            "LOCAL_VARIABLE_DECLARATIONS": 1,
            "VARIABLE_ASSIGNMENTS": 1,
            "FINAL_VARIABLE": 1,
            "FOR_LOOPS": 1,
            "METHOD": 1,
            "RETURN": 1,
            "TYPE_INFERENCE": 2,
            "STATIC_METHOD": 1,
            "TYPE_PARAMETERS": 2,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1,
            "FOR_LOOP_STEP": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 1,
                "column": 34
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 39
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "FINAL_VARIABLE",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "LOCAL_VARIABLE_DECLARATIONS",
              "location": {
                "line": 2,
                "column": 6
              }
            },
            {
              "feature": "VARIABLE_ASSIGNMENTS",
              "location": {
                "line": 2,
                "column": 6
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 2,
                "column": 6
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 2,
                "column": 29
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 2,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "FOR_LOOPS",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "TYPE_INFERENCE",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "FOR_LOOP_STEP",
              "location": {
                "line": 3,
                "column": 26
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 34
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 4
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 4,
                "column": 10
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 4,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 16
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 7,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": [
            "add"
          ]
        },
        "lineCount": {
          "source": 7,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [],
    "commonFiles": [],
    "templateByLanguage": {
      "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Question {\n  {{{ contents }}}\n}",
      "kotlin": "class Question {\n  {{{ contents }}}\n}"
    },
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Integer",
        "java.util.ArrayList",
        "java.util.List",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "kotlin.ranges.RangesKt",
        "java.lang.Integer",
        "java.util.ArrayList",
        "java.util.List",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "kotlin.ranges.IntProgression",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 53088,
        "kotlin": 56112
      },
      "allocationLimit": {
        "java": 517888,
        "kotlin": 665472
      },
      "solutionClassSize": {
        "java": 425,
        "kotlin": 1066
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 8563968,
        "kotlin": 8563968
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 4,
      "mutationCount": 10,
      "solutionMaxRuntime": 24,
      "bootstrapLength": 6648,
      "mutationLength": 46,
      "incorrectLength": 771,
      "calibrationLength": 310,
      "solutionCoverage": {
        "covered": 4,
        "total": 4,
        "missed": 0
      },
      "executionCounts": {
        "java": 3318,
        "kotlin": 3507
      },
      "memoryAllocation": {
        "java": 32368,
        "kotlin": 41592
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 516.325
    },
    "fauxStatic": true,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-  return values;",
          "+  return null;"
        ],
        "language": "java",
        "mutation": "NULL_RETURN",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,5 +2,1 @@",
          "-  List<Integer> values = new ArrayList<>();",
          "-  for (int i = 0; i < value; i += 2) {",
          "-    values.add(i);",
          "-  }",
          "-  return values;",
          "+  return null;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-  for (int i = 0; i < value; i += 2) {",
          "+  for (int i = 0; i <= value; i += 2) {"
        ],
        "language": "java",
        "mutation": "CONDITIONAL_BOUNDARY",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-  for (int i = 0; i < value; i += 2) {",
          "+  for (int i = 0; i < value; i += 3) {"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,3 +3,0 @@",
          "-  for (int i = 0; i < value; i += 2) {",
          "-    values.add(i);",
          "-  }"
        ],
        "language": "java",
        "mutation": "REMOVE_LOOP",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,0 +5,1 @@",
          "+    break;"
        ],
        "language": "java",
        "mutation": "ADD_BREAK",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,3 +3,1 @@",
          "-  for (int i = 0; i < value; i += 2) {",
          "-    values.add(i);",
          "-  }",
          "+  for (int i = 0; i < value; i += 2) {}"
        ],
        "language": "java",
        "mutation": "REMOVE_STATEMENT",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-  for (int i = 0; i < value; i += 2) {",
          "+  for (int i = 0; i < value; i += 1) {"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-  for (int i = 0; i < value; i += 2) {",
          "+  for (int i = 1; i < value; i += 2) {"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 1,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withfeaturedeadcode/Question.java"
  },
  {
    "published": {
      "contentHash": "7e1641997386c3e3f1f5592632470def-v2024.6.1",
      "path": "with-java-switch",
      "author": "challen@illinois.edu",
      "version": "2023.12.0",
      "name": "With Java Switch",
      "type": "METHOD",
      "packageName": "com.github.cs124_illinois.questioner.testing.withjavaswitch",
      "klass": "Question",
      "languages": [
        "java",
        "kotlin"
      ],
      "descriptions": {
        "java": "<p>Test feature check using Java 14 switch expression.</p>",
        "kotlin": "<p>Test feature check using Java 14 switch expression, Kotlin equivalent.</p>"
      },
      "templateImports": [],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "STRING": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "SWITCH_EXPRESSION": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "SWITCH_EXPRESSION",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 23
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 25
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 10,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 11,
                "column": 15
              }
            },
            {
              "feature": "THROW",
              "location": {
                "line": 11,
                "column": 15
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 11,
                "column": 21
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 11,
                "column": 51
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 12,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 12,
                "column": 3
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 13,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 14,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "String",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "kotlin": {
          "featureMap": {
            "ELSE_STATEMENTS": 1,
            "METHOD": 1,
            "STRING": 7,
            "THROW": 1,
            "STATIC_METHOD": 1,
            "WHEN_STATEMENT": 1,
            "WHEN_EXPRESSIONS": 1,
            "WHEN_ENTRY": 8,
            "LAST_WHEN_ENTRY": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "WHEN_STATEMENT",
              "location": {
                "line": 1,
                "column": 32
              }
            },
            {
              "feature": "WHEN_EXPRESSIONS",
              "location": {
                "line": 1,
                "column": 32
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 43
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 2,
                "column": 14
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 15
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 17
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 5,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 16
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 6,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 14
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 16
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 8,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 14
              }
            },
            {
              "feature": "ELSE_STATEMENTS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "LAST_WHEN_ENTRY",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 10
              }
            },
            {
              "feature": "THROW",
              "location": {
                "line": 9,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 41
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        }
      },
      "lineCounts": {
        "java": {
          "source": 12,
          "comment": 0,
          "blank": 0
        },
        "kotlin": {
          "source": 10,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 9,
        "kotlin": 9
      },
      "recursiveMethodsByLanguage": {
        "java": [],
        "kotlin": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Throwable",
          "java.lang.IllegalArgumentException",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ],
        "kotlin": [
          "java.lang.Throwable",
          "java.lang.IllegalArgumentException",
          "java.lang.Integer",
          "java.lang.Long",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withjavaswitch/Question.java",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withjavaswitch/correct/kotlin/Question.kt",
        "src/main/java/com/github/cs124_illinois/questioner/testing/withjavaswitch/incorrect/java/withifelse/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jeed.core.FeatureName;\nimport edu.illinois.cs.cs125.jeed.core.Features;\nimport edu.illinois.cs.cs125.jenisol.core.FixedParameters;\nimport edu.illinois.cs.cs125.jenisol.core.RandomParameters;\nimport edu.illinois.cs.cs125.questioner.lib.CheckFeatures;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.FeatureCheckException;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\n/*\n * Test feature check using Java 14 switch expression.\n */\n\n@Correct(name = \"With Java Switch\", version = \"2023.12.0\", author = \"challen@illinois.edu\")\n@Wrap\npublic class Question {\n  String fromDay(int day) {\n    return switch (day) {\n      case 0 -> \"Monday\"; // mutate-disable-remove-statement\n      case 1 -> \"Tuesday\"; // mutate-disable-remove-statement\n      case 2 -> \"Wednesday\"; // mutate-disable-remove-statement\n      case 3 -> \"Thursday\"; // mutate-disable-remove-statement\n      case 4 -> \"Friday\"; // mutate-disable-remove-statement\n      case 5 -> \"Saturday\"; // mutate-disable-remove-statement\n      case 6 -> \"Sunday\"; // mutate-disable-remove-statement\n      default -> throw new IllegalArgumentException(); // mutate-disable-remove-statement\n    };\n  }\n\n  @FixedParameters private static final List<Integer> FIXED = Arrays.asList(-1, 0, 6, 7);\n\n  @RandomParameters\n  private static int randomParameters(Random random) {\n    return random.nextInt(16) - 6;\n  }\n\n  @CheckFeatures\n  private static List<String> checkFeatures(Features solution, Features submission) {\n    if (submission.getFeatureMap().containsKey(FeatureName.IF_STATEMENTS)) {\n      throw new FeatureCheckException(\"Submission uses an if-else statement\");\n    }\n    return new ArrayList<>();\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withjavaswitch/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "String fromDay(int day) {\n  return switch (day) {\n    case 0 -> \"Monday\"; // mutate-disable-remove-statement\n    case 1 -> \"Tuesday\"; // mutate-disable-remove-statement\n    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement\n    case 3 -> \"Thursday\"; // mutate-disable-remove-statement\n    case 4 -> \"Friday\"; // mutate-disable-remove-statement\n    case 5 -> \"Saturday\"; // mutate-disable-remove-statement\n    case 6 -> \"Sunday\"; // mutate-disable-remove-statement\n    default -> throw new IllegalArgumentException(); // mutate-disable-remove-statement\n  };\n}",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withjavaswitch/Question.java",
        "complexity": 9,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "STRING": 1,
            "THROW": 1,
            "NEW_KEYWORD": 1,
            "SWITCH_EXPRESSION": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "SWITCH_EXPRESSION",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 3,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 23
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 25
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 24
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 10,
                "column": 14
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 10,
                "column": 22
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 11,
                "column": 15
              }
            },
            {
              "feature": "THROW",
              "location": {
                "line": 11,
                "column": 15
              }
            },
            {
              "feature": "NEW_KEYWORD",
              "location": {
                "line": 11,
                "column": 21
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 11,
                "column": 51
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 12,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 12,
                "column": 3
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 13,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 14,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "String",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 12,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      },
      "kotlin": {
        "klass": "Question",
        "contents": "fun fromDay(day: Int): String = when (day) {\n  0 -> \"Monday\"\n  1 -> \"Tuesday\"\n  2 -> \"Wednesday\"\n  3 -> \"Thursday\"\n  4 -> \"Friday\"\n  5 -> \"Saturday\"\n  6 -> \"Sunday\"\n  else -> throw IllegalArgumentException()\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withjavaswitch/correct/kotlin/Question.kt",
        "complexity": 9,
        "features": {
          "featureMap": {
            "ELSE_STATEMENTS": 1,
            "METHOD": 1,
            "STRING": 7,
            "THROW": 1,
            "STATIC_METHOD": 1,
            "WHEN_STATEMENT": 1,
            "WHEN_EXPRESSIONS": 1,
            "WHEN_ENTRY": 8,
            "LAST_WHEN_ENTRY": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "WHEN_STATEMENT",
              "location": {
                "line": 1,
                "column": 32
              }
            },
            {
              "feature": "WHEN_EXPRESSIONS",
              "location": {
                "line": 1,
                "column": 32
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 43
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 2,
                "column": 14
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 15
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 17
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 5,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 16
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 6,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 14
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 16
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 8,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 14
              }
            },
            {
              "feature": "ELSE_STATEMENTS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "LAST_WHEN_ENTRY",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 10
              }
            },
            {
              "feature": "THROW",
              "location": {
                "line": 9,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 41
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 10,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [
      {
        "klass": "Question",
        "contents": "fun fromDay(day: Int): String = when (day) {\n  0 -> \"Monday\"\n  1 -> \"Tuesday\"\n  2 -> \"Wednesday\"\n  3 -> \"Thursday\"\n  4 -> \"Friday\"\n  5 -> \"Saturday\"\n  6 -> \"Sunday\"\n  else -> throw IllegalArgumentException()\n}",
        "language": "kotlin",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withjavaswitch/correct/kotlin/Question.kt",
        "complexity": 9,
        "features": {
          "featureMap": {
            "ELSE_STATEMENTS": 1,
            "METHOD": 1,
            "STRING": 7,
            "THROW": 1,
            "STATIC_METHOD": 1,
            "WHEN_STATEMENT": 1,
            "WHEN_EXPRESSIONS": 1,
            "WHEN_ENTRY": 8,
            "LAST_WHEN_ENTRY": 1
          },
          "featureList": [
            {
              "feature": "METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "STATIC_METHOD",
              "location": {
                "line": 1,
                "column": 0
              }
            },
            {
              "feature": "WHEN_STATEMENT",
              "location": {
                "line": 1,
                "column": 32
              }
            },
            {
              "feature": "WHEN_EXPRESSIONS",
              "location": {
                "line": 1,
                "column": 32
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 43
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 2,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 2,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 2,
                "column": 14
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 3,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 15
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 4,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 4,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 4,
                "column": 17
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 5,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 5,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 5,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 5,
                "column": 16
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 6,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 6,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 6,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 6,
                "column": 14
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 7,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 7,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 7,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 7,
                "column": 16
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 8,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 8,
                "column": 7
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 8,
                "column": 7
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 8,
                "column": 14
              }
            },
            {
              "feature": "ELSE_STATEMENTS",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "WHEN_ENTRY",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "LAST_WHEN_ENTRY",
              "location": {
                "line": 9,
                "column": 2
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 9,
                "column": 10
              }
            },
            {
              "feature": "THROW",
              "location": {
                "line": 9,
                "column": 10
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 9,
                "column": 41
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 10,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [],
          "identifierList": [],
          "dottedMethodList": []
        },
        "lineCount": {
          "source": 10,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    ],
    "incorrectExamples": [
      {
        "klass": "Question",
        "contents": "String fromDay(int day) {\n  if (day == 0) {\n    return \"Monday\";\n  } else if (day == 1) {\n    return \"Tuesday\";\n  } else if (day == 2) {\n    return \"Wednesday\";\n  } else if (day == 3) {\n    return \"Thursday\";\n  } else if (day == 4) {\n    return \"Friday\";\n  } else if (day == 5) {\n    return \"Saturday\";\n  } else if (day == 6) {\n    return \"Sunday\";\n  } else {\n    throw new IllegalArgumentException();\n  }\n}",
        "reason": "FEATURES",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withjavaswitch/incorrect/java/withifelse/Question.java",
        "starter": false,
        "needed": true,
        "testCount": -1,
        "suppressions": []
      }
    ],
    "commonFiles": [],
    "templateByLanguage": {
      "java": "public class Question {\n  {{{ contents }}}\n}",
      "kotlin": "class Question {\n  {{{ contents }}}\n}"
    },
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Throwable",
        "java.lang.IllegalArgumentException",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin.",
        "java.lang.Throwable",
        "java.lang.IllegalArgumentException",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 7488,
        "kotlin": 7488
      },
      "allocationLimit": {
        "java": 2943232,
        "kotlin": 2943232
      },
      "solutionClassSize": {
        "java": 435,
        "kotlin": 678
      },
      "solutionDeadCode": {
        "java": 0,
        "kotlin": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": [],
        "kotlin": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "kotlinSuppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 49772032,
        "kotlin": 49772032
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 27,
      "mutationCount": 61,
      "solutionMaxRuntime": 9,
      "bootstrapLength": 4080,
      "mutationLength": 404,
      "incorrectLength": 1991,
      "calibrationLength": 73,
      "solutionCoverage": {
        "covered": 9,
        "total": 9,
        "missed": 0
      },
      "executionCounts": {
        "java": 468,
        "kotlin": 468
      },
      "memoryAllocation": {
        "java": 183952,
        "kotlin": 183952
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 257.345
    },
    "fauxStatic": true,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,10 +2,1 @@",
          "-  return switch (day) {",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "-    case 1 -> \"Tuesday\"; // mutate-disable-remove-statement",
          "-    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement",
          "-    case 3 -> \"Thursday\"; // mutate-disable-remove-statement",
          "-    case 4 -> \"Friday\"; // mutate-disable-remove-statement",
          "-    case 5 -> \"Saturday\"; // mutate-disable-remove-statement",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "-    default -> throw new IllegalArgumentException(); // mutate-disable-remove-statement",
          "-  };",
          "+  return \"\";"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,10 +2,1 @@",
          "-  return switch (day) {",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "-    case 1 -> \"Tuesday\"; // mutate-disable-remove-statement",
          "-    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement",
          "-    case 3 -> \"Thursday\"; // mutate-disable-remove-statement",
          "-    case 4 -> \"Friday\"; // mutate-disable-remove-statement",
          "-    case 5 -> \"Saturday\"; // mutate-disable-remove-statement",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "-    default -> throw new IllegalArgumentException(); // mutate-disable-remove-statement",
          "-  };",
          "+  return null;"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "+    case 0 -> \"monday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "+    case 0 -> \"Moiday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "+    case 0 -> \"Mo7day\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "+    case 0 -> \"onday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "+    case 0 -> \"MoTday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "+    case 0 -> \"Monda\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "+    case 0 -> \"M0nday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -3,1 +3,1 @@",
          "-    case 0 -> \"Monday\"; // mutate-disable-remove-statement",
          "+    case 0 -> \"MoCday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 1,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "+    case 6 -> \"SuSday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "+    case 6 -> \"Sunda\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "+    case 6 -> \"Sutday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "+    case 6 -> \"Suntay\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "+    case 6 -> \"Sunhay\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "+    case 7 -> \"Sunday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "+    case 6 -> \"sunday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -9,1 +9,1 @@",
          "-    case 6 -> \"Sunday\"; // mutate-disable-remove-statement",
          "+    case 6 -> \"unday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 2,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-    case 4 -> \"Friday\"; // mutate-disable-remove-statement",
          "+    case 4 -> \"FriXay\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-    case 4 -> \"Friday\"; // mutate-disable-remove-statement",
          "+    case 4 -> \"Uriday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-    case 4 -> \"Friday\"; // mutate-disable-remove-statement",
          "+    case 4 -> \"FrGday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-    case 4 -> \"Friday\"; // mutate-disable-remove-statement",
          "+    case 4 -> \"friday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-    case 4 -> \"Friday\"; // mutate-disable-remove-statement",
          "+    case 4 -> \"Frida\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -7,1 +7,1 @@",
          "-    case 4 -> \"Friday\"; // mutate-disable-remove-statement",
          "+    case 4 -> \"zriday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 4,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement",
          "+    case 2 -> \"ednesday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "incorrectIndex": 0,
        "testCount": 9,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement",
          "+    case 2 -> \"WednesMay\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 9,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement",
          "+    case 2 -> \"Wednesdgy\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 9,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement",
          "+    case 2 -> \"Wednesda3\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 9,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement",
          "+    case 2 -> \"Wednesda\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 9,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement",
          "+    case 2 -> \"wednesday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 9,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -5,1 +5,1 @@",
          "-    case 2 -> \"Wednesday\"; // mutate-disable-remove-statement",
          "+    case 2 -> \"Wednesdey\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_LOOKALIKE",
        "testCount": 9,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    case 5 -> \"Saturday\"; // mutate-disable-remove-statement",
          "+    case 5 -> \"SaturdaK\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 12,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    case 5 -> \"Saturday\"; // mutate-disable-remove-statement",
          "+    case 5 -> \"Caturday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "NULL_RETURN",
        "testCount": 12,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    case 5 -> \"Saturday\"; // mutate-disable-remove-statement",
          "+    case 5 -> \"Saturda\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 12,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    case 5 -> \"Saturday\"; // mutate-disable-remove-statement",
          "+    case 5 -> \"SKturday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 12,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    case 5 -> \"Saturday\"; // mutate-disable-remove-statement",
          "+    case 5 -> \"aturday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 12,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    case 5 -> \"Saturday\"; // mutate-disable-remove-statement",
          "+    case 5 -> \"saturday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 12,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -8,1 +8,1 @@",
          "-    case 5 -> \"Saturday\"; // mutate-disable-remove-statement",
          "+    case 5 -> \"Sa5urday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 12,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-    case 1 -> \"Tuesday\"; // mutate-disable-remove-statement",
          "+    case 1 -> \"Tuesdar\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 20,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-    case 1 -> \"Tuesday\"; // mutate-disable-remove-statement",
          "+    case 1 -> \"uesday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 20,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-    case 1 -> \"Tuesday\"; // mutate-disable-remove-statement",
          "+    case 1 -> \"Tudsday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 20,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-    case 1 -> \"Tuesday\"; // mutate-disable-remove-statement",
          "+    case 1 -> \"tuesday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 20,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-    case 1 -> \"Tuesday\"; // mutate-disable-remove-statement",
          "+    case 1 -> \"T2esday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 20,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -4,1 +4,1 @@",
          "-    case 1 -> \"Tuesday\"; // mutate-disable-remove-statement",
          "+    case 1 -> \"Thesday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 20,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    case 3 -> \"Thursday\"; // mutate-disable-remove-statement",
          "+    case 3 -> \"thursday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 25,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    case 3 -> \"Thursday\"; // mutate-disable-remove-statement",
          "+    case 3 -> \"Thursda\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 25,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    case 3 -> \"Thursday\"; // mutate-disable-remove-statement",
          "+    case 3 -> \"whursday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_CASE",
        "testCount": 25,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    case 3 -> \"Thursday\"; // mutate-disable-remove-statement",
          "+    case 3 -> \"Thursdak\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 25,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    case 3 -> \"Thursday\"; // mutate-disable-remove-statement",
          "+    case 3 -> \"ThuIsday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "NUMBER_LITERAL",
        "testCount": 25,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    case 3 -> \"Thursday\"; // mutate-disable-remove-statement",
          "+    case 3 -> \"Txursday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL_TRIM",
        "testCount": 25,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -6,1 +6,1 @@",
          "-    case 3 -> \"Thursday\"; // mutate-disable-remove-statement",
          "+    case 3 -> \"hursday\"; // mutate-disable-remove-statement"
        ],
        "language": "java",
        "mutation": "STRING_LITERAL",
        "testCount": 25,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withjavaswitch/Question.java"
  },
  {
    "published": {
      "contentHash": "698a87ee8a0d8c4960d859c396ea1d22-v2024.6.1",
      "path": "with-map-extras",
      "author": "challen@illinois.edu",
      "version": "2023.9.0",
      "name": "With Map Extras",
      "type": "METHOD",
      "packageName": "com.github.cs124_illinois.questioner.testing.withmapextras",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Test whether Map automatic whitelisting works.\nNote that tests are in Questioner.</p>"
      },
      "templateImports": [
        "java.util.Map",
        "java.util.Set"
      ],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "STRING": 1,
            "BOXING_CLASSES": 1,
            "TYPE_PARAMETERS": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 2,
                "column": 15
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BOXING_CLASSES",
              "location": {
                "line": 2,
                "column": 24
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 38
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int",
            "Map<String,Integer>",
            "String",
            "Integer"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "size"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 1
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.lang.Integer",
          "java.lang.Long",
          "java.util.Map",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withmapextras/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.jenisol.core.NotNull;\nimport edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport java.util.Map;\n\n/*\n * Test whether Map automatic whitelisting works.\n * Note that tests are in Questioner.\n */\n\n@Correct(name = \"With Map Extras\", author = \"challen@illinois.edu\", version = \"2023.9.0\")\n@Wrap\npublic class Question {\n  int mapSize(@NotNull Map<String, Integer> map) {\n    return map.size();\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withmapextras/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "int mapSize(Map<String, Integer> map) {\n  return map.size();\n}",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withmapextras/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "STRING": 1,
            "BOXING_CLASSES": 1,
            "TYPE_PARAMETERS": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 2,
                "column": 15
              }
            },
            {
              "feature": "STRING",
              "location": {
                "line": 2,
                "column": 16
              }
            },
            {
              "feature": "BOXING_CLASSES",
              "location": {
                "line": 2,
                "column": 24
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 38
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 19
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "int",
            "Map<String,Integer>",
            "String",
            "Integer"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "size"
          ]
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [],
    "commonFiles": [],
    "templateByLanguage": {
      "java": "import java.util.Map;\nimport java.util.Set;\n\npublic class Question {\n  {{{ contents }}}\n}"
    },
    "importWhitelist": [],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "java.util.Map",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink",
        "java.util.Set"
      ],
      "kotlinWhitelist": [
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 3072
      },
      "allocationLimit": {
        "java": 5632
      },
      "solutionClassSize": {
        "java": 242
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 5632,
        "kotlin": 5632
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 13,
      "mutationCount": 3,
      "solutionMaxRuntime": 15,
      "bootstrapLength": 930,
      "mutationLength": 15,
      "incorrectLength": 274,
      "calibrationLength": 53,
      "solutionCoverage": {
        "covered": 1,
        "total": 1,
        "missed": 0
      },
      "executionCounts": {
        "java": 192
      },
      "memoryAllocation": {
        "java": 352
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 322.288
    },
    "fauxStatic": true,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return map.size();",
          "+  return map.size() + 1;"
        ],
        "language": "java",
        "mutation": "MODIFY_LENGTH_AND_SIZE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return map.size();",
          "+  return map.size() - 1;"
        ],
        "language": "java",
        "mutation": "MODIFY_LENGTH_AND_SIZE",
        "testCount": 0,
        "suppressions": []
      },
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return map.size();",
          "+  return 0;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 0,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withmapextras/Question.java"
  },
  {
    "published": {
      "contentHash": "3fccc106cc61afe617573d2ed3a2786f-v2024.6.1",
      "path": "with-template-imports",
      "author": "challen@illinois.edu",
      "version": "2022.7.0",
      "name": "With Template Imports",
      "type": "METHOD",
      "packageName": "com.github.cs124_illinois.questioner.testing.withtemplateimports",
      "klass": "Question",
      "languages": [
        "java"
      ],
      "descriptions": {
        "java": "<p>Example to test use of import statements in method templates.</p>"
      },
      "templateImports": [
        "java.util.Arrays",
        "java.util.List",
        "java.util.ArrayList"
      ],
      "questionerVersion": "2024.6.1",
      "authorName": "",
      "tags": []
    },
    "classification": {
      "featuresByLanguage": {
        "java": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "BOXING_CLASSES": 1,
            "TYPE_PARAMETERS": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 2,
                "column": 4
              }
            },
            {
              "feature": "BOXING_CLASSES",
              "location": {
                "line": 2,
                "column": 5
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 41
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 37
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "List<Integer>",
            "Integer",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "asList"
          ]
        }
      },
      "lineCounts": {
        "java": {
          "source": 3,
          "comment": 0,
          "blank": 0
        }
      },
      "complexity": {
        "java": 1
      },
      "recursiveMethodsByLanguage": {
        "java": []
      },
      "loadedClassesByLanguage": {
        "java": [
          "java.util.Arrays",
          "java.lang.Integer",
          "java.util.List",
          "java.lang.Long",
          "java.lang.ResourceUsageSink",
          "java.lang.Object",
          "java.lang.Class",
          "java.lang.String",
          "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
        ]
      }
    },
    "metadata": {
      "allFiles": [
        "src/main/java/com/github/cs124_illinois/questioner/testing/withtemplateimports/Question.java"
      ],
      "unusedFiles": [],
      "focused": false,
      "publish": true
    },
    "annotatedControls": {},
    "question": {
      "klass": "Question",
      "contents": "import edu.illinois.cs.cs125.questioner.lib.Correct;\nimport edu.illinois.cs.cs125.questioner.lib.TemplateImports;\nimport edu.illinois.cs.cs125.questioner.lib.Wrap;\nimport java.util.Arrays;\nimport java.util.List;\n\n/*\n * Example to test use of import statements in method templates.\n */\n\n@Correct(name = \"With Template Imports\", version = \"2022.7.0\", author = \"challen@illinois.edu\")\n@Wrap\n@TemplateImports(paths = \"java.util.List,java.util.ArrayList,java.util.Arrays\")\npublic class Question {\n  List<Integer> max(int first, int second) {\n    return Arrays.asList(first, second);\n  }\n}",
      "language": "java",
      "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withtemplateimports/Question.java",
      "suppressions": []
    },
    "solutionByLanguage": {
      "java": {
        "klass": "Question",
        "contents": "List<Integer> max(int first, int second) {\n  return Arrays.asList(first, second);\n}",
        "language": "java",
        "path": "src/main/java/com/github/cs124_illinois/questioner/testing/withtemplateimports/Question.java",
        "complexity": 1,
        "features": {
          "featureMap": {
            "METHOD": 1,
            "RETURN": 1,
            "BOXING_CLASSES": 1,
            "TYPE_PARAMETERS": 1,
            "DOT_NOTATION": 1,
            "DOTTED_METHOD_CALL": 1
          },
          "featureList": [
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 1,
                "column": 22
              }
            },
            {
              "feature": "METHOD",
              "location": {
                "line": 2,
                "column": 0
              }
            },
            {
              "feature": "TYPE_PARAMETERS",
              "location": {
                "line": 2,
                "column": 4
              }
            },
            {
              "feature": "BOXING_CLASSES",
              "location": {
                "line": 2,
                "column": 5
              }
            },
            {
              "feature": "BLOCK_START",
              "location": {
                "line": 2,
                "column": 41
              }
            },
            {
              "feature": "STATEMENT_START",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "RETURN",
              "location": {
                "line": 3,
                "column": 2
              }
            },
            {
              "feature": "DOT_NOTATION",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "DOTTED_METHOD_CALL",
              "location": {
                "line": 3,
                "column": 9
              }
            },
            {
              "feature": "STATEMENT_END",
              "location": {
                "line": 3,
                "column": 37
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 4,
                "column": 0
              }
            },
            {
              "feature": "BLOCK_END",
              "location": {
                "line": 5,
                "column": 0
              }
            }
          ],
          "importList": [],
          "typeList": [
            "List<Integer>",
            "Integer",
            "int"
          ],
          "identifierList": [],
          "dottedMethodList": [
            "asList"
          ]
        },
        "lineCount": {
          "source": 3,
          "comment": 0,
          "blank": 0
        },
        "expectedDeadCount": 0,
        "suppressions": []
      }
    },
    "alternativeSolutions": [],
    "incorrectExamples": [],
    "commonFiles": [],
    "templateByLanguage": {
      "java": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Question {\n  {{{ contents }}}\n}"
    },
    "importWhitelist": [
      "java.util.List",
      "java.util.ArrayList",
      "java.util.Arrays"
    ],
    "importBlacklist": [],
    "checkstyleSuppressions": [],
    "testingSettings": {
      "seed": 124,
      "testCount": 64,
      "outputLimit": 0,
      "perTestOutputLimit": 1024,
      "javaWhitelist": [
        "java.util.List",
        "java.util.ArrayList",
        "java.util.Arrays",
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.lang.Integer",
        "edu.illinois.cs.cs125.questioner.lib.ResourceMonitoring$TracingSink",
        "java.lang.Long",
        "java.lang.ResourceUsageSink",
        "Question",
        "java.lang.Object",
        "java.lang.Class",
        "java.lang.String",
        "com.beyondgrader.resourceagent.jeed.VirtualFilesystem$EnsureRedirectingSink"
      ],
      "kotlinWhitelist": [
        "java.util.List",
        "java.util.ArrayList",
        "java.util.Arrays",
        "java.lang.",
        "java.io.PrintStream",
        "kotlin.Metadata",
        "kotlin.reflect.jvm.",
        "java.util.Iterator",
        "java.util.Collection",
        "java.util.",
        "kotlin."
      ],
      "shrink": false,
      "executionCountLimit": {
        "java": 3072
      },
      "allocationLimit": {
        "java": 256384
      },
      "solutionClassSize": {
        "java": 361
      },
      "solutionDeadCode": {
        "java": 0
      },
      "checkBlacklist": true,
      "disableLineCountLimit": false,
      "disableAllocationLimit": false,
      "solutionRecursiveMethods": {
        "java": []
      },
      "minTestCount": -1,
      "maxTestCount": -1,
      "suppressions": [],
      "runAll": false,
      "recordTrace": false
    },
    "testTestingLimits": {
      "outputLimit": 512,
      "executionCountLimit": {
        "java": 1024,
        "kotlin": 1024
      },
      "allocationLimit": {
        "java": 4311424,
        "kotlin": 4311424
      }
    },
    "validationResults": {
      "seed": 124,
      "requiredTestCount": 18,
      "mutationCount": 1,
      "solutionMaxRuntime": 45,
      "bootstrapLength": 3156,
      "mutationLength": 13,
      "incorrectLength": 44,
      "calibrationLength": 63,
      "solutionCoverage": {
        "covered": 1,
        "total": 1,
        "missed": 0
      },
      "executionCounts": {
        "java": 192
      },
      "memoryAllocation": {
        "java": 16024
      },
      "canTestTest": true,
      "javaSolutionBootstrapCPUTimeMS": 328.145
    },
    "fauxStatic": true,
    "testTestingIncorrect": [
      {
        "deltas": [
          "--- Correct.java",
          "+++ Incorrect.java",
          "@@ -2,1 +2,1 @@",
          "-  return Arrays.asList(first, second);",
          "+  return null;"
        ],
        "language": "java",
        "mutation": "REMOVE_METHOD",
        "testCount": 0,
        "suppressions": []
      }
    ],
    "correctPath": "src/main/java/com/github/cs124_illinois/questioner/testing/withtemplateimports/Question.java"
  }
]